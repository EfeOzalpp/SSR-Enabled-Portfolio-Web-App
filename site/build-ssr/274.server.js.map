{"version":3,"file":"274.server.js","mappings":"m3vCAYA,MA0DA,EA1DsBA,EAAGC,gBAAe,EAAMC,UAAU,QACtD,MAAMC,GAAYC,EAAAA,EAAAA,QAAuB,OAClCC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAMC,IAAWF,EAAAA,EAAAA,WAAS,GA+BjC,OA5BAG,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAIC,WAAW,IAAMH,GAAQ,GAAOP,GAC1C,MAAO,IAAMW,aAAaF,IACzB,CAACT,KAGJQ,EAAAA,EAAAA,WAAU,KACR,IAAKF,IAASL,EAAUW,QAAS,OACjC,MAAMC,EAAQC,OAAOC,WAEnBX,EADES,GAAS,IACH,GACCA,GAAS,KACV,GAEA,IAGV,MAAMG,EAAOC,IAAAA,cAAqB,CAChChB,UAAWA,EAAUW,QACrBM,SAAU,MACVC,MAAM,EACNC,UAAU,EACVC,cAAeC,IAGjB,MAAO,IAAMN,EAAKO,WACjB,CAACjB,IAECA,GAWHkB,EAAAA,EAAAA,GAAA,OAAKC,UAAW,2BAA0B1B,EAAe,aAAe,aAAc2B,UACpFF,EAAAA,EAAAA,GAAA,OACEC,UAAU,iBACVE,IAAK1B,EACL2B,MAAO,CACLf,MAAO,GAAGV,MACV0B,OAAQ,GAAG1B,YAdfqB,EAAAA,EAAAA,GAAA,OACEC,UAAW,2BAA0B1B,EAAe,aAAe,aACnE,cAAY,S","sources":["webpack://personal-site/./src/utils/loading/loading.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport lottie from 'lottie-web';\r\nimport loading from '../../svg/loading.json';\r\n\r\nimport '../../styles/loading-overlay.css';\r\n\r\ntype LoadingScreenProps = {\r\n  isFullScreen?: boolean;\r\n  /** Delay before showing loader (ms) */\r\n  delayMs?: number;\r\n};\r\n\r\nconst LoadingScreen = ({ isFullScreen = true, delayMs = 400 }: LoadingScreenProps) => {\r\n  const container = useRef<HTMLDivElement>(null);\r\n  const [size, setSize] = useState(70); // default to largest\r\n  const [show, setShow] = useState(false);\r\n\r\n  // Delay before showing loader\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setShow(true), delayMs);\r\n    return () => clearTimeout(t);\r\n  }, [delayMs]);\r\n\r\n  // Lottie setup (only if visible)\r\n  useEffect(() => {\r\n    if (!show || !container.current) return;\r\n    const width = window.innerWidth;\r\n    if (width <= 767) {\r\n      setSize(32);\r\n    } else if (width <= 1024) {\r\n      setSize(40);\r\n    } else {\r\n      setSize(56);\r\n    }\r\n\r\n    const anim = lottie.loadAnimation({\r\n      container: container.current,\r\n      renderer: 'svg',\r\n      loop: true,\r\n      autoplay: true,\r\n      animationData: loading,\r\n    });\r\n\r\n    return () => anim.destroy();\r\n  }, [show]);\r\n\r\n  if (!show) {\r\n    // Empty placeholder to keep structure aligned\r\n    return (\r\n      <div\r\n        className={`loading-screen-wrapper ${isFullScreen ? 'fullscreen' : 'contained'}`}\r\n        aria-hidden=\"true\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`loading-screen-wrapper ${isFullScreen ? 'fullscreen' : 'contained'}`}>\r\n      <div\r\n        className=\"loading-lottie\"\r\n        ref={container}\r\n        style={{\r\n          width: `${size}px`,\r\n          height: `${size}px`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n"],"names":["LoadingScreen","isFullScreen","delayMs","container","useRef","size","setSize","useState","show","setShow","useEffect","t","setTimeout","clearTimeout","current","width","window","innerWidth","anim","lottie","renderer","loop","autoplay","animationData","loading","destroy","_jsx","className","children","ref","style","height"],"sourceRoot":""}