{"version":3,"file":"330.server.js","mappings":"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","sources":["webpack://personal-site/./src/components/dynamic-app/shadow-entry.tsx","webpack://personal-site/./src/dynamic-app/preload-dynamic-app.ts","webpack://personal-site/./src/utils/content-utility/real-mobile.ts"],"sourcesContent":["// src/components/dynamic-app/shadow-entry.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DynamicAppInbound from '../../dynamic-app/dynamic-app-shadow.jsx';\r\n\r\ntype Props = { blockId: string };\r\n\r\nconst ShadowEntry: React.FC<Props> = ({ blockId }) => {\r\n  const [target, setTarget] = useState<HTMLElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (typeof document === 'undefined') return;\r\n\r\n    const container = document.getElementById(blockId);\r\n    if (!container) return;\r\n\r\n    const tryFind = () => {\r\n      const overlay = container.querySelector<HTMLElement>('.screen-overlay') || null;\r\n      if (overlay) {\r\n        setTarget(overlay);\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (tryFind()) return;\r\n\r\n    const observer = new MutationObserver(() => {\r\n      if (tryFind()) observer.disconnect();\r\n    });\r\n    observer.observe(container, { childList: true, subtree: true });\r\n    return () => observer.disconnect();\r\n  }, [blockId]);\r\n\r\n  // Announce mount/unmount of the embedded scroll container to the outer controller\r\n  useEffect(() => {\r\n    if (!target) return;\r\n    const detail = { el: target, blockId };\r\n    window.dispatchEvent(new CustomEvent('embedded-app:mounted', { detail }));\r\n    return () => {\r\n      window.dispatchEvent(new CustomEvent('embedded-app:unmounted', { detail }));\r\n    };\r\n  }, [target, blockId]);\r\n\r\n  // Called by DynamicAppInbound (guarded there) on first paint\r\n  const handleReady = () => {\r\n    // hide any SSR/client spinner if present\r\n    const loader = document.getElementById('dynamic-overlay-loader');\r\n    if (loader) loader.style.display = 'none';\r\n    // notify listeners (e.g. enhancer / other logic)\r\n    window.dispatchEvent(new CustomEvent('dynamic-app:hydrated'));\r\n  };\r\n\r\n  if (!target) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <DynamicAppInbound onFocusChange={() => {}} onReady={handleReady} />,\r\n    target\r\n  );\r\n};\r\n\r\nexport default ShadowEntry;\r\n","// src/dynamic-app/preload-dynamic-app.ts\r\nimport fetchSVGIcons from './lib/fetchSVGIcons';\r\nimport { fetchImages } from './lib/fetchUser';\r\n\r\nexport type Cache = { icons?: Record<string, string>; images?: any[] };\r\n\r\ntype IconLike = { title?: string; icon?: string; url?: string };\r\n\r\nlet cache: Cache = {};\r\nlet inFlight: Promise<Cache> | null = null;\r\n\r\nexport function getPreloadedDynamicApp(): Cache {\r\n  return cache;\r\n}\r\n\r\nexport function primeFromSSR(data?: Partial<Cache>) {\r\n  if (!data) return;\r\n  cache = { ...cache, ...data };\r\n}\r\n\r\nfunction toIconMap(list: IconLike[]): Record<string, string> {\r\n  return list.reduce((acc, it) => {\r\n    if (!it?.title) return acc;\r\n    const val = it.icon ?? it.url; // inline SVG takes precedence; else URL\r\n    if (typeof val === 'string' && val.length > 0) acc[it.title] = val;\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\n/** Wait for current preloading (if any), then return cache */\r\nexport async function whenDynamicPreloadReady(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) {\r\n    await inFlight;\r\n    return cache;\r\n  }\r\n  return cache;\r\n}\r\n\r\nexport async function ensureIconsPreload(): Promise<Record<string, string>> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.icons && inFlight) {\r\n    await inFlight;\r\n    return cache.icons || {};\r\n  }\r\n  if (cache.icons) return cache.icons;\r\n\r\n  let iconsRaw: unknown;\r\n  try {\r\n    iconsRaw = await fetchSVGIcons();\r\n  } catch {\r\n    iconsRaw = [];\r\n  }\r\n  const list = Array.isArray(iconsRaw) ? (iconsRaw as IconLike[]) : [];\r\n  const icons = toIconMap(list);\r\n  cache.icons = icons;\r\n  return icons;\r\n}\r\n\r\nexport async function ensureImagesPreload(): Promise<any[]> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.images && inFlight) {\r\n    await inFlight;\r\n    return cache.images || [];\r\n  }\r\n  if (cache.images) return cache.images;\r\n\r\n  let imagesRaw: unknown;\r\n  try {\r\n    imagesRaw = await fetchImages();\r\n  } catch {\r\n    imagesRaw = [];\r\n  }\r\n  const images = Array.isArray(imagesRaw) ? (imagesRaw as any[]) : [];\r\n  cache.images = images;\r\n  return images;\r\n}\r\n\r\n/** Convenience: ensure both icons + images (with in-flight dedupe) */\r\nexport async function ensureDynamicPreload(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) return inFlight;\r\n\r\n  inFlight = Promise.all([ensureIconsPreload(), ensureImagesPreload()])\r\n    .then(([icons, images]) => {\r\n      cache = { icons, images };\r\n      return cache;\r\n    })\r\n    .finally(() => {\r\n      inFlight = null;\r\n    });\r\n\r\n  return inFlight;\r\n}\r\n\r\n// Optional: hydrate from SSR\r\ndeclare global {\r\n  interface Window {\r\n    __DYNAMIC_PRELOAD__?: Cache;\r\n  }\r\n}\r\nif (typeof window !== 'undefined' && (window as any).__DYNAMIC_PRELOAD__) {\r\n  primeFromSSR((window as any).__DYNAMIC_PRELOAD__);\r\n}\r\n","// useRealMobileViewport.ts\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useRealMobileViewport() {\r\n  const [isRealMobile, setIsRealMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const touch = navigator.maxTouchPoints > 0;\r\n      const coarse = window.matchMedia?.('(pointer: coarse)').matches ?? false;\r\n      const width = window.innerWidth;\r\n      const ua = navigator.userAgent || navigator.vendor || (window as any).opera;\r\n\r\n      // iOS detection (iPhone / iPad)\r\n      const isIOS = /iPad|iPhone|iPod/.test(ua) ||\r\n        (navigator.platform === 'MacIntel' && touch); // iPadOS pretends to be Mac\r\n\r\n      // Android detection\r\n      const isAndroid = /Android/.test(ua);\r\n\r\n      // Consider it real mobile if:\r\n      // - Touch exists, and viewport is small, or\r\n      // - Known mobile UA\r\n      const realMobile =\r\n        (touch && width <= 1024) ||\r\n        isIOS ||\r\n        isAndroid ||\r\n        coarse;\r\n\r\n      setIsRealMobile(realMobile);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    window.addEventListener('orientationchange', checkMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n      window.removeEventListener('orientationchange', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  return isRealMobile;\r\n}\r\n"],"names":["ShadowEntry","blockId","target","setTarget","useState","useEffect","document","container","getElementById","tryFind","overlay","querySelector","observer","MutationObserver","disconnect","observe","childList","subtree","detail","el","window","dispatchEvent","CustomEvent","ReactDOM","_jsx","DynamicAppInbound","onFocusChange","onReady","handleReady","loader","style","display","cache","inFlight","getPreloadedDynamicApp","async","whenDynamicPreloadReady","icons","images","ensureIconsPreload","iconsRaw","fetchSVGIcons","Array","isArray","reduce","acc","it","title","val","icon","url","length","ensureImagesPreload","imagesRaw","fetchImages","ensureDynamicPreload","Promise","all","then","finally","data","__DYNAMIC_PRELOAD__","useRealMobileViewport","isRealMobile","setIsRealMobile","checkMobile","touch","navigator","maxTouchPoints","coarse","matchMedia","matches","width","innerWidth","ua","userAgent","vendor","opera","isIOS","test","platform","isAndroid","addEventListener","removeEventListener"],"sourceRoot":""}