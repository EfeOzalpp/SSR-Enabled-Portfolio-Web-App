{"version":3,"file":"690.server.js","mappings":"6GAGO,SAASA,IACd,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAS,GAsCjD,OApCAC,EAAAA,EAAAA,WAAU,KACR,MAAMC,EAAcA,KAClB,MAAMC,EAAQC,UAAUC,eAAiB,EACnCC,EAASC,OAAOC,aAAa,qBAAqBC,UAAW,EAC7DC,EAAQH,OAAOI,WACfC,EAAKR,UAAUS,WAAaT,UAAUU,QAAWP,OAAeQ,MAGhEC,EAAQ,mBAAmBC,KAAKL,IACZ,aAAvBR,UAAUc,UAA2Bf,EAGlCgB,EAAY,UAAUF,KAAKL,GAWjCb,EALGI,GAASO,GAAS,MACnBM,GACAG,GACAb,IASJ,OAJAJ,IACAK,OAAOa,iBAAiB,SAAUlB,GAClCK,OAAOa,iBAAiB,oBAAqBlB,GAEtC,KACLK,OAAOc,oBAAoB,SAAUnB,GACrCK,OAAOc,oBAAoB,oBAAqBnB,KAEjD,IAEIJ,CACT,C","sources":["webpack://personal-site/./src/utils/content-utility/real-mobile.ts"],"sourcesContent":["// useRealMobileViewport.ts\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useRealMobileViewport() {\r\n  const [isRealMobile, setIsRealMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const touch = navigator.maxTouchPoints > 0;\r\n      const coarse = window.matchMedia?.('(pointer: coarse)').matches ?? false;\r\n      const width = window.innerWidth;\r\n      const ua = navigator.userAgent || navigator.vendor || (window as any).opera;\r\n\r\n      // iOS detection (iPhone / iPad)\r\n      const isIOS = /iPad|iPhone|iPod/.test(ua) ||\r\n        (navigator.platform === 'MacIntel' && touch); // iPadOS pretends to be Mac\r\n\r\n      // Android detection\r\n      const isAndroid = /Android/.test(ua);\r\n\r\n      // Consider it real mobile if:\r\n      // - Touch exists, and viewport is small, or\r\n      // - Known mobile UA\r\n      const realMobile =\r\n        (touch && width <= 1024) ||\r\n        isIOS ||\r\n        isAndroid ||\r\n        coarse;\r\n\r\n      setIsRealMobile(realMobile);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    window.addEventListener('orientationchange', checkMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n      window.removeEventListener('orientationchange', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  return isRealMobile;\r\n}\r\n"],"names":["useRealMobileViewport","isRealMobile","setIsRealMobile","useState","useEffect","checkMobile","touch","navigator","maxTouchPoints","coarse","window","matchMedia","matches","width","innerWidth","ua","userAgent","vendor","opera","isIOS","test","platform","isAndroid","addEventListener","removeEventListener"],"sourceRoot":""}