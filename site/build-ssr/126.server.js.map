{"version":3,"file":"126.server.js","mappings":"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","sources":["webpack://personal-site/./src/utils/content-utility/dynamic-overlay.ts","webpack://personal-site/./src/dynamic-app/preload-dynamic-app.ts","webpack://personal-site/./src/utils/content-utility/real-mobile.ts","webpack://personal-site/./src/components/dynamic-app/frame.tsx","webpack://personal-site/./src/utils/loading/loading-hub.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\n\r\nexport function useDynamicOverlay(frameRef: React.RefObject<HTMLElement>) {\r\n  const [style, setStyle] = useState<{\r\n    width: number;\r\n    heightSet1: number;\r\n    heightSet2: number;\r\n  }>({\r\n    width: 0,\r\n    heightSet1: 0,\r\n    heightSet2: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const update = () => {\r\n      if (!frameRef.current) return;\r\n\r\n      const rect = frameRef.current.getBoundingClientRect();\r\n      const aspect = rect.width / rect.height;\r\n\r\n      // Aspect ratio breakpoints\r\n      const minAspect = 1.5 / 6.5; // ~0.2307\r\n      const maxAspect = 3.3 / 6.5; // ~0.5077\r\n\r\n      // Width range (shared)\r\n      const minWidth = 150;\r\n      const maxWidth = 320;\r\n\r\n      // Height range set 1 (your current svh-based values)\r\n      const minHeightSet1 = 63;\r\n      const maxHeightSet1 = 93;\r\n\r\n      // Height range set 2 (original px-based)\r\n      const minHeightSet2 = 280;\r\n      const maxHeightSet2 = 610;\r\n\r\n      // --- Aspect ratio-based lerp ---\r\n      let width: number;\r\n      let height1: number;\r\n      let height2: number;\r\n\r\n      if (aspect <= minAspect) {\r\n        width = minWidth;\r\n        height1 = minHeightSet1;\r\n        height2 = minHeightSet2;\r\n      } else if (aspect >= maxAspect) {\r\n        width = maxWidth;\r\n        height1 = maxHeightSet1;\r\n        height2 = maxHeightSet2;\r\n      } else {\r\n        const t = (aspect - minAspect) / (maxAspect - minAspect);\r\n        width = minWidth + (maxWidth - minWidth) * t;\r\n        height1 = minHeightSet1 + (maxHeightSet1 - minHeightSet1) * t;\r\n        height2 = minHeightSet2 + (maxHeightSet2 - minHeightSet2) * t;\r\n      }\r\n\r\n      // --- Absolute height multiplier (0 → 2 over 0–1300px) ---\r\n      const minFrameHeight = 0;\r\n      const maxFrameHeight = 1300;\r\n      const minMultiplier = 0;\r\n      const maxMultiplier = 2;\r\n\r\n      const clampedHeight = Math.min(Math.max(rect.height, minFrameHeight), maxFrameHeight);\r\n      const heightT = (clampedHeight - minFrameHeight) / (maxFrameHeight - minFrameHeight);\r\n      const heightMultiplier = minMultiplier + (maxMultiplier - minMultiplier) * heightT;\r\n\r\n      // Apply multiplier\r\n      width *= heightMultiplier;\r\n      height1 *= heightMultiplier;\r\n      height2 *= heightMultiplier;\r\n\r\n      setStyle({\r\n        width,\r\n        heightSet1: height1,\r\n        heightSet2: height2,\r\n      });\r\n    };\r\n\r\n    update();\r\n    window.addEventListener('resize', update);\r\n    window.addEventListener('orientationchange', update);\r\n    return () => {\r\n      window.removeEventListener('resize', update);\r\n      window.removeEventListener('orientationchange', update);\r\n    };\r\n  }, [frameRef]);\r\n\r\n  return style; // { width, heightSet1, heightSet2 }\r\n}\r\n","// src/dynamic-app/preload-dynamic-app.ts\r\nimport fetchSVGIcons from './lib/fetchSVGIcons';\r\nimport { fetchImages } from './lib/fetchUser';\r\n\r\nexport type Cache = { icons?: Record<string, string>; images?: any[] };\r\n\r\ntype IconLike = { title?: string; icon?: string; url?: string };\r\n\r\nlet cache: Cache = {};\r\nlet inFlight: Promise<Cache> | null = null;\r\n\r\nexport function getPreloadedDynamicApp(): Cache {\r\n  return cache;\r\n}\r\n\r\nexport function primeFromSSR(data?: Partial<Cache>) {\r\n  if (!data) return;\r\n  cache = { ...cache, ...data };\r\n}\r\n\r\nfunction toIconMap(list: IconLike[]): Record<string, string> {\r\n  return list.reduce((acc, it) => {\r\n    if (!it?.title) return acc;\r\n    const val = it.icon ?? it.url; // inline SVG takes precedence; else URL\r\n    if (typeof val === 'string' && val.length > 0) acc[it.title] = val;\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\n/** Wait for current preloading (if any), then return cache */\r\nexport async function whenDynamicPreloadReady(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) {\r\n    await inFlight;\r\n    return cache;\r\n  }\r\n  return cache;\r\n}\r\n\r\nexport async function ensureIconsPreload(): Promise<Record<string, string>> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.icons && inFlight) {\r\n    await inFlight;\r\n    return cache.icons || {};\r\n  }\r\n  if (cache.icons) return cache.icons;\r\n\r\n  let iconsRaw: unknown;\r\n  try {\r\n    iconsRaw = await fetchSVGIcons();\r\n  } catch {\r\n    iconsRaw = [];\r\n  }\r\n  const list = Array.isArray(iconsRaw) ? (iconsRaw as IconLike[]) : [];\r\n  const icons = toIconMap(list);\r\n  cache.icons = icons;\r\n  return icons;\r\n}\r\n\r\nexport async function ensureImagesPreload(): Promise<any[]> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.images && inFlight) {\r\n    await inFlight;\r\n    return cache.images || [];\r\n  }\r\n  if (cache.images) return cache.images;\r\n\r\n  let imagesRaw: unknown;\r\n  try {\r\n    imagesRaw = await fetchImages();\r\n  } catch {\r\n    imagesRaw = [];\r\n  }\r\n  const images = Array.isArray(imagesRaw) ? (imagesRaw as any[]) : [];\r\n  cache.images = images;\r\n  return images;\r\n}\r\n\r\n/** Convenience: ensure both icons + images (with in-flight dedupe) */\r\nexport async function ensureDynamicPreload(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) return inFlight;\r\n\r\n  inFlight = Promise.all([ensureIconsPreload(), ensureImagesPreload()])\r\n    .then(([icons, images]) => {\r\n      cache = { icons, images };\r\n      return cache;\r\n    })\r\n    .finally(() => {\r\n      inFlight = null;\r\n    });\r\n\r\n  return inFlight;\r\n}\r\n\r\n// Optional: hydrate from SSR\r\ndeclare global {\r\n  interface Window {\r\n    __DYNAMIC_PRELOAD__?: Cache;\r\n  }\r\n}\r\nif (typeof window !== 'undefined' && (window as any).__DYNAMIC_PRELOAD__) {\r\n  primeFromSSR((window as any).__DYNAMIC_PRELOAD__);\r\n}\r\n","// useRealMobileViewport.ts\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useRealMobileViewport() {\r\n  const [isRealMobile, setIsRealMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const touch = navigator.maxTouchPoints > 0;\r\n      const coarse = window.matchMedia?.('(pointer: coarse)').matches ?? false;\r\n      const width = window.innerWidth;\r\n      const ua = navigator.userAgent || navigator.vendor || (window as any).opera;\r\n\r\n      // iOS detection (iPhone / iPad)\r\n      const isIOS = /iPad|iPhone|iPod/.test(ua) ||\r\n        (navigator.platform === 'MacIntel' && touch); // iPadOS pretends to be Mac\r\n\r\n      // Android detection\r\n      const isAndroid = /Android/.test(ua);\r\n\r\n      // Consider it real mobile if:\r\n      // - Touch exists, and viewport is small, or\r\n      // - Known mobile UA\r\n      const realMobile =\r\n        (touch && width <= 1024) ||\r\n        isIOS ||\r\n        isAndroid ||\r\n        coarse;\r\n\r\n      setIsRealMobile(realMobile);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    window.addEventListener('orientationchange', checkMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n      window.removeEventListener('orientationchange', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  return isRealMobile;\r\n}\r\n","// src/components/dynamic-app/frame.tsx\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport client from '../../utils/sanity';\r\nimport { useDynamicOverlay } from '../../utils/content-utility/dynamic-overlay';\r\nimport { useSsrData } from '../../utils/context-providers/ssr-data-context';\r\nimport { useRealMobileViewport } from '../../utils/content-utility/real-mobile';\r\nimport LoadingHub from '../../utils/loading/loading-hub';\r\nimport '../../styles/block-type-a.css';\r\n\r\nimport { ensureDynamicPreload } from '../../dynamic-app/preload-dynamic-app';\r\nimport { urlFor } from '../../utils/media-providers/image-builder';\r\n\r\nconst getDeviceType = (w: number): 'phone' | 'tablet' | 'laptop' =>\r\n  w < 768 ? 'phone' : w < 1025 ? 'tablet' : 'laptop';\r\n\r\nconst Frame: React.FC = () => {\r\n  const ssrData = useSsrData();\r\n  const preloadedMap = (ssrData?.preloaded?.dynamic as Record<string, string>) || {};\r\n  const [svgMap, setSvgMap] = useState<Record<string, string>>(preloadedMap);\r\n  const [device, setDevice] = useState<'phone' | 'tablet' | 'laptop'>(\r\n    getDeviceType(typeof window !== 'undefined' ? window.innerWidth : 1200)\r\n  );\r\n  const [imgLoaded, setImgLoaded] = useState(false);\r\n  const [fetchErr, setFetchErr] = useState<string | null>(null);\r\n\r\n  const frameRef = useRef<HTMLImageElement>(null);\r\n  const overlaySize = useDynamicOverlay(frameRef);\r\n  const isRealMobile = useRealMobileViewport();\r\n\r\n  useEffect(() => {\r\n    const onResize = () => setDevice(getDeviceType(window.innerWidth));\r\n    window.addEventListener('resize', onResize);\r\n    window.addEventListener('orientationchange', onResize);\r\n    return () => {\r\n      window.removeEventListener('resize', onResize);\r\n      window.removeEventListener('orientationchange', onResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(svgMap).length > 0) return;\r\n    client\r\n      .fetch(\r\n        `*[_type == \"svgAsset\" && title in [\"Laptop\", \"Tablet\", \"Phone\"]]{\r\n          title, file { asset->{url} }\r\n        }`\r\n      )\r\n      .then((results: any[]) => {\r\n        const map: Record<string, string> = {};\r\n        results.forEach((r: any) => {\r\n          map[r.title.toLowerCase()] = r.file?.asset?.url;\r\n        });\r\n        setSvgMap(map);\r\n      })\r\n      .catch((err) => {\r\n        setFetchErr('assets-unavailable');\r\n        console.warn('[Frame] fetch SVG failed:', err);\r\n      });\r\n  }, [svgMap]);\r\n\r\n  const svgUrl = svgMap[device];\r\n\r\n  useEffect(() => {\r\n    const img = frameRef.current;\r\n    setImgLoaded(Boolean(img && img.complete && svgUrl));\r\n  }, [svgUrl]);\r\n\r\n  // When the frame is in place, warm LOW-QUALITY card images into cache\r\n  const warmedOnce = useRef(false);\r\n  useEffect(() => {\r\n    if (!imgLoaded || warmedOnce.current) return;\r\n    warmedOnce.current = true;\r\n\r\n    (async () => {\r\n      try {\r\n        const { images } = await ensureDynamicPreload(); // deduped with any other callers\r\n        if (!Array.isArray(images) || images.length === 0) return;\r\n\r\n        // tune these to taste\r\n        const WARM_COUNT = 16;     // how many items to warm\r\n        const LQ_WIDTH = 320;      // low-quality width\r\n        const LQ_QUALITY = 25;     // low-quality JPEG/WebP quality\r\n\r\n        const head = document.head;\r\n        let warmed = 0;\r\n\r\n        outer: for (const it of images) {\r\n          // warm both image1 and image2 if present, but respect WARM_COUNT cap\r\n          const candidates = [it?.image1, it?.image2].filter(Boolean);\r\n          for (const srcAsset of candidates) {\r\n            const src = urlFor(srcAsset)\r\n              .width(LQ_WIDTH)\r\n              .quality(LQ_QUALITY)\r\n              .auto('format')\r\n              .url();\r\n\r\n            if (!src) continue;\r\n\r\n            // Avoid duplicate <link> entries\r\n            if (!document.querySelector(`link[rel=\"preload\"][as=\"image\"][href=\"${src}\"]`)) {\r\n              const link = document.createElement('link');\r\n              link.rel = 'preload';\r\n              link.as = 'image';\r\n              link.href = src;\r\n              link.crossOrigin = 'anonymous';\r\n              // TS-safe way to set fetch priority hint\r\n              link.setAttribute('fetchpriority', 'low');\r\n              head.appendChild(link);\r\n            }\r\n\r\n            // Kick off an actual request regardless of preload support\r\n            const preImg = new Image();\r\n            preImg.decoding = 'async';\r\n            preImg.crossOrigin = 'anonymous';\r\n            preImg.src = src;\r\n\r\n            warmed += 1;\r\n            if (warmed >= WARM_COUNT) break outer;\r\n          }\r\n        }\r\n      } catch {\r\n        // ignore; cards will still lazy-load normally\r\n      }\r\n    })();\r\n  }, [imgLoaded]);\r\n\r\n  return (\r\n    <section className=\"block-type-a\">\r\n      <div className=\"device-wrapper\">\r\n        <img\r\n          ref={frameRef}\r\n          id=\"dynamic-device-frame\"\r\n          src={svgUrl || undefined}\r\n          alt={device}\r\n          className={`device-frame ${device}`}\r\n          decoding=\"async\"\r\n          loading=\"eager\"\r\n          onLoad={() => setImgLoaded(true)}\r\n          onError={() => setImgLoaded(true)}\r\n          draggable={false}\r\n          style={{\r\n            visibility: svgUrl ? 'visible' : 'hidden',\r\n            opacity: imgLoaded && svgUrl ? 1 : 0,\r\n            transition: 'opacity 150ms ease',\r\n          }}\r\n          data-src-laptop={svgMap['laptop'] || ''}\r\n          data-src-tablet={svgMap['tablet'] || ''}\r\n          data-src-phone={svgMap['phone'] || ''}\r\n          data-device={device}\r\n        />\r\n\r\n        <div\r\n          className=\"screen-overlay\"\r\n          style={\r\n            device === 'phone'\r\n              ? {\r\n                  width: `${overlaySize.width}px`,\r\n                  height: isRealMobile\r\n                    ? `${overlaySize.heightSet1}svh`\r\n                    : `${overlaySize.heightSet2}px`,\r\n                }\r\n              : undefined\r\n          }\r\n        >\r\n          {/* Loader hub goes here. ShadowEntry will hide it onReady */}\r\n          <div id=\"dynamic-overlay-loader\">\r\n            <LoadingHub\r\n              className=\"loading-hub--dynamic loading-hub--center\"\r\n              keyword=\"dynamic\"\r\n              lines={[\r\n                'Measuring app frame…',\r\n                'Creating shadow root…',\r\n                'Injecting app styles…',\r\n                'Loading SVG icons…',\r\n                'Mounting app shell…',\r\n                'Wiring observers and input…',\r\n              ]}\r\n              minHeight={72}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {fetchErr && <div className=\"soft-warning\">media frame unavailable</div>}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Frame;\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport '../../styles/loading-hub.css';\r\n\r\ntype LoadingHubProps = {\r\n  keyword?: string;\r\n  lines?: string[];\r\n  minHeight?: number | string;\r\n  className?: string;\r\n  ariaLabel?: string;\r\n  progress?: number | null;\r\n  cycleMs?: number;\r\n  animMs?: number;\r\n  /** Delay before showing loader (ms) */\r\n  delayMs?: number;\r\n};\r\n\r\nexport default function LoadingHub({\r\n  keyword,\r\n  lines = ['Loading…'],\r\n  minHeight = 160,\r\n  className = '',\r\n  ariaLabel = 'Loading',\r\n  progress = null,\r\n  cycleMs = 1400,\r\n  animMs = 900,\r\n  delayMs = 400,\r\n}: LoadingHubProps) {\r\n  const [lineIndex, setLineIndex] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // --- delay before showing loader ---\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setShow(true), delayMs);\r\n    return () => clearTimeout(t);\r\n  }, [delayMs]);\r\n\r\n  // rotate through provided lines\r\n  const hasMultiple = lines.length > 1;\r\n  useEffect(() => {\r\n    if (!hasMultiple) return;\r\n    const t = setInterval(() => {\r\n      setLineIndex((i) => (i + 1) % lines.length);\r\n    }, cycleMs);\r\n    return () => clearInterval(t);\r\n  }, [hasMultiple, lines.length, cycleMs]);\r\n\r\n  // Avoid reflow: lock container height\r\n  const style = useMemo<React.CSSProperties>(() => {\r\n    const h = typeof minHeight === 'number' ? `${minHeight}px` : (minHeight ?? 'auto');\r\n    return { minHeight: h };\r\n  }, [minHeight]);\r\n\r\n  // SR-only progressive percent\r\n  const srRef = useRef<HTMLSpanElement>(null);\r\n  useEffect(() => {\r\n    if (progress == null || !srRef.current) return;\r\n    srRef.current.textContent = `${Math.round(progress)}%`;\r\n  }, [progress]);\r\n\r\n  if (!show) {\r\n    // render an invisible placeholder with locked height\r\n    return <div style={style} aria-hidden=\"true\" />;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`loading-hub loading-hub--text ${className || ''}`}\r\n      style={style}\r\n      role=\"status\"\r\n      aria-live=\"polite\"\r\n      aria-label={ariaLabel}\r\n      data-keyword={keyword || undefined}\r\n      data-anim-ms={animMs}\r\n    >\r\n      <div className=\"loading-hub__copy\" aria-hidden={false}>\r\n        <h2 key={lineIndex} className=\"loading-hub__line\">\r\n          {lines[lineIndex]}\r\n        </h2>\r\n\r\n        {progress != null && (\r\n          <div className=\"loading-hub__progress\" aria-hidden=\"true\">\r\n            {Math.round(progress)}%\r\n          </div>\r\n        )}\r\n\r\n        <span className=\"sr-only\" ref={srRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["useDynamicOverlay","frameRef","style","setStyle","useState","width","heightSet1","heightSet2","useEffect","update","current","rect","getBoundingClientRect","aspect","height","minAspect","height1","height2","t","heightMultiplier","Math","min","max","window","addEventListener","removeEventListener","cache","inFlight","getPreloadedDynamicApp","async","whenDynamicPreloadReady","icons","images","ensureIconsPreload","iconsRaw","fetchSVGIcons","Array","isArray","reduce","acc","it","title","val","icon","url","length","ensureImagesPreload","imagesRaw","fetchImages","ensureDynamicPreload","Promise","all","then","finally","data","__DYNAMIC_PRELOAD__","useRealMobileViewport","isRealMobile","setIsRealMobile","checkMobile","touch","navigator","maxTouchPoints","coarse","matchMedia","matches","innerWidth","ua","userAgent","vendor","opera","isIOS","test","platform","isAndroid","getDeviceType","w","Frame","ssrData","useSsrData","preloadedMap","preloaded","dynamic","svgMap","setSvgMap","device","setDevice","imgLoaded","setImgLoaded","fetchErr","setFetchErr","useRef","overlaySize","onResize","Object","keys","client","fetch","results","map","forEach","r","toLowerCase","file","asset","catch","err","console","warn","svgUrl","img","Boolean","complete","warmedOnce","WARM_COUNT","LQ_WIDTH","LQ_QUALITY","head","document","warmed","outer","candidates","image1","image2","filter","srcAsset","src","urlFor","quality","auto","querySelector","link","createElement","rel","as","href","crossOrigin","setAttribute","appendChild","preImg","Image","decoding","_jsx","className","children","_jsxs","ref","id","undefined","alt","loading","onLoad","onError","draggable","visibility","opacity","transition","LoadingHub","keyword","lines","minHeight","ariaLabel","progress","cycleMs","animMs","delayMs","lineIndex","setLineIndex","show","setShow","setTimeout","clearTimeout","hasMultiple","setInterval","i","clearInterval","useMemo","srRef","textContent","round","role"],"sourceRoot":""}