{"version":3,"file":"131.server.js","mappings":"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","sources":["webpack://personal-site/./src/dynamic-app/components/fireworksDisplay.jsx"],"sourcesContent":["// Firework Animation Code\r\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\r\nimport q5 from 'q5';\r\nimport { useRealMobileViewport } from '../../utils/content-utility/real-mobile.ts';\r\n\r\nconst FireworksDisplay = ({ colorMapping = {}, items = [], lastKnownColor, onToggleFireworks }) => {\r\n  const canvasRef = useRef(null);\r\n  const [fireworksEnabled, setFireworksEnabled] = useState(true);\r\n  const fireworksRef = useRef([]);\r\n  const fireworksEnabledRef = useRef(true);\r\n\r\n  const isPageHiddenRef = useRef(false);\r\n  const hiddenStartTimeRef = useRef(0);\r\n  const hiddenDurationRef = useRef(0);\r\n\r\n  const isRealMobile = useRealMobileViewport();\r\n  const isRealMobileRef = useRef(isRealMobile);\r\n\r\n  useEffect(() => {\r\n    isRealMobileRef.current = isRealMobile;\r\n  }, [isRealMobile]);\r\n\r\n  // Documént visibility\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.visibilityState === 'hidden') {\r\n        isPageHiddenRef.current = true;\r\n        hiddenStartTimeRef.current = performance.now();\r\n      } else if (document.visibilityState === 'visible') {\r\n        isPageHiddenRef.current = false;\r\n        const now = performance.now();\r\n        hiddenDurationRef.current += now - hiddenStartTimeRef.current;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () => {\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n    };\r\n  }, []);\r\n\r\n  // Function to adjust brightness of a hex color\r\n  function adjustBrightness(hex, multiplier) {\r\n    // Convert hex to RGB\r\n    let r = parseInt(hex.slice(1, 3), 16);\r\n    let g = parseInt(hex.slice(3, 5), 16);\r\n    let b = parseInt(hex.slice(5, 7), 16);\r\n\r\n    // Apply brightness multiplier\r\n    r = Math.min(255, Math.max(0, Math.floor(r * multiplier)));\r\n    g = Math.min(255, Math.max(0, Math.floor(g * multiplier)));\r\n    b = Math.min(255, Math.max(0, Math.floor(b * multiplier)));\r\n\r\n    // Convert back to hex and return\r\n    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;\r\n  }\r\n\r\n    const p5InstanceRef = useRef(null); // Track single p5 instance\r\n    const latestItems = useRef(items);\r\n    const latestColorMapping = useRef(colorMapping);\r\n    const latestLastKnownColor = useRef(lastKnownColor);\r\n\r\n  useEffect(() => {\r\n    latestItems.current = items;\r\n    latestColorMapping.current = colorMapping;\r\n    latestLastKnownColor.current = lastKnownColor;\r\n    }, [items, colorMapping, lastKnownColor]);\r\n\r\n  useEffect(() => {\r\n    let destroyed = false;\r\n\r\n    if (!canvasRef.current || p5InstanceRef.current || destroyed) return;\r\n\r\n\r\n      const sketch = (p) => {\r\n        let fireworks = fireworksRef.current;\r\n        let lastFireworkTime = -8000;\r\n        let lastLaunchPosition = p.createVector(p.width / 2, p.height);\r\n        const minDistance = 1000;\r\n\r\n        class Particle {\r\n          constructor(x, y, c, firework, size, type, hasTrail = false) {\r\n            this.pos = p.createVector(x, y);\r\n            this.vel = firework\r\n              ? p.createVector(0, p.random(-10, -20)) // Firework launch velocity\r\n              : p.createVector(p.random(-1, 1), p.random(-1, 1)).mult(p.random(0, 18)); // Explosion velocity\r\n            this.acc = p.createVector(0, 0);\r\n          \r\n            // Adjust brightness based on firework type and size\r\n            this.col = this.adjustBrightness(\r\n              c,\r\n              size > 10\r\n                ? p.random(1.4, 2) // Larger particles\r\n                : size > 5\r\n                ? p.random(1.1, 1.3) // Mid-size particles\r\n                : p.random(0.7, 1.1) // Smaller particles\r\n            );\r\n          \r\n            this.firework = firework;\r\n            this.size = size;\r\n            this.type = type;\r\n            this.hasTrail = hasTrail;\r\n          \r\n            this.shapeType = p.random(['circle', 'square', 'triangle']); // Add random shape selection\r\n          \r\n            // Randomize lifespan based on size (larger particles live longer)\r\n            let minLifespan, maxLifespan;\r\n\r\n            if (p.windowWidth < 768) {\r\n              minLifespan = p.random(30, 60);\r\n              maxLifespan = p.random(40, 80);\r\n            } else if (p.windowWidth <= 1024) {\r\n              minLifespan = p.random(50, 80);\r\n              maxLifespan = p.random(70, 100);\r\n            } else {\r\n              minLifespan = p.random(50, 90);\r\n              maxLifespan = p.random(80, 140);\r\n            }\r\n\r\n            this.lifespan = p.map(size, 1, 12, minLifespan, maxLifespan);\r\n\r\n          \r\n            // Adjust trail length based on particle size\r\n            this.trailLength = size >= 4 && size <= 12 ? 8 : 1; // Longer trail for larger particles\r\n            this.trail = Array(this.trailLength).fill(p.createVector(x, y)); // Set trail array\r\n          \r\n            // Map trailLifespan to speed (higher speed -> higher alpha, lower speed -> fade out)\r\n            const initialSpeed = this.vel.mag();\r\n            this.trailLifespan = Array(this.trailLength).fill(p.map(initialSpeed, 0, 20, 0, 100)); // Dynamically set based on speed\r\n          \r\n            this.fadeFactor = p.map(size, 1, 15, 0.6, 0.5); // Smaller particles fade faster\r\n          \r\n            // Blinking properties (only for explosion particles)\r\n            this.blinkingSpeed = firework ? 0 : p.random(5, 30); // Blinking speed for explosion particles\r\n            this.blinkingAlpha = firework ? 255 : 255; // Default alpha value for explosion particles\r\n          }           \r\n        \r\n          // Adjust brightness of the color\r\n          adjustBrightness(baseColor, multiplier) {\r\n            const r = Math.min(255, Math.max(0, baseColor.levels[0] * multiplier));\r\n            const g = Math.min(255, Math.max(0, baseColor.levels[1] * multiplier));\r\n            const b = Math.min(255, Math.max(0, baseColor.levels[2] * multiplier));\r\n            return p.color(r, g, b);\r\n          }\r\n        \r\n          applyForce(force) {\r\n            this.acc.add(force);\r\n          }\r\n        \r\n          update() {\r\n            this.vel.add(this.acc);\r\n            this.pos.add(this.vel);\r\n            this.acc.mult(0);\r\n        \r\n            if (!this.firework) {\r\n              this.vel.mult(0.927); // Slow down over time\r\n              this.lifespan -= this.fadeFactor; // Decrease lifespan\r\n        \r\n              // Make sure lifespan does not go below 0\r\n              if (this.lifespan <= 0) {\r\n                this.lifespan = 0;\r\n              }\r\n      \r\n              // Trail\r\n              if (this.hasTrail) {\r\n                this.trail.pop(); // Remove the oldest trail point\r\n                this.trail.unshift(this.pos.copy()); // Add the newest trail point\r\n                for (let i = 0; i < this.trailLifespan.length; i++) {\r\n                  this.trailLifespan[i] -= this.fadeFactor; // Gradually fade trail points\r\n                  this.trailLifespan[i] = Math.max(0, this.trailLifespan[i]); // Clamp lifespan to 0\r\n                }\r\n              }\r\n        \r\n              // Apply gravity based on particle size\r\n              let gravityForce;\r\n              if (this.size >= 1 && this.size < 2) {\r\n                gravityForce = p.random(-0.151, -0.161); // Weaker gravity for size 1\r\n              } else if (this.size >= 2 && this.size < 3) {\r\n                gravityForce = p.random(-0.146, -0.156); // Gravity for size 2\r\n              } else if (this.size >= 3 && this.size < 4) {\r\n                gravityForce = p.random(-0.144, -0.145); // Gravity for size 3\r\n              } else if (this.size >= 4 && this.size < 5) {\r\n                gravityForce = p.random(-0.141, -0.143); // Gravity for size 4\r\n              } else if (this.size >= 5 && this.size < 6) {\r\n                gravityForce = p.random(-0.139, -0.14); // Gravity for size 5\r\n              } else if (this.size >= 6 && this.size < 7) {\r\n                gravityForce = p.random(-0.137, -0.138); // Gravity for size 6\r\n              } else if (this.size >= 7 && this.size < 8) {\r\n                gravityForce = p.random(-0.135, -0.136); // Gravity for size 7\r\n              } else if (this.size >= 8 && this.size < 9) {\r\n                gravityForce = p.random(-0.134, -0.136); // Gravity for size 8\r\n              } else if (this.size <= 9) {\r\n                gravityForce = p.random(-0.135, -0.137); // Stronger gravity for size 9\r\n              } else if (this.size >= 10 && this.size <= 12) {\r\n                gravityForce = p.random(-0.094, -0.137); // Stronger gravity for size 9\r\n              }\r\n\r\n              this.applyForce(p.createVector(0, gravityForce)); // Apply gravity\r\n            }\r\n        \r\n            // Update blinking alpha for explosion particles\r\n            if (!this.firework && this.type === 'BLINKING') {\r\n              this.blinkingAlpha = Math.abs(255 * Math.sin((p.millis() / 1000) * this.blinkingSpeed));\r\n            }\r\n          }\r\n        \r\n          show() {\r\n            let alpha = this.firework\r\n              ? p.map(this.lifespan, 0, 255, 0, 255) // Normal fading for firework particles\r\n              : this.type === 'BLINKING'\r\n              ? this.blinkingAlpha // Blinking for explosion particles\r\n              : p.map(this.lifespan, 0, 255, 0, 255); // Fading for explosion particles\r\n          \r\n            p.noStroke();\r\n          \r\n            // Shrinking logic for the particle\r\n            let shrinkSize = this.size;\r\n            if (!this.firework) {\r\n              // Lifespan timing: calculate elapsed time (255 lifespan = full life)\r\n              const elapsedTime = p.map(this.lifespan, 255, 0, 0, 5); // 5 seconds total lifespan\r\n              const shrinkFactor = elapsedTime <= 2\r\n                ? 1 // No shrinking for the first 2 seconds\r\n                : p.map(this.lifespan, 255, 0, 1, 0); // Start shrinking after 2 seconds\r\n          \r\n              // Exponential shrinking towards the end\r\n              shrinkSize = this.size * (1 - Math.pow(1 - shrinkFactor, 6)); \r\n            }\r\n          \r\n            const normalizedSize = Math.max(shrinkSize * 1.1, 1); // Clamp minimum size to 1\r\n          \r\n            // Calculate rotation angle based on velocity vector\r\n            const rotationAngle = p.atan2(this.vel.y, this.vel.x); // Angle in radians\r\n          \r\n            // Draw trails first\r\n            if (this.hasTrail) {\r\n              for (let i = 0; i < this.trail.length; i++) {\r\n                const trailAlpha = this.trailLifespan[i];\r\n                if (trailAlpha > 0) {\r\n                  // Use a fixed size for trail points\r\n                  const trailSize = this.firework ? this.size * 0.9 : this.size * 0.8;\r\n            \r\n                  p.strokeWeight(trailSize); // Fixed trail size\r\n                  p.stroke(\r\n                    this.col.levels[0],\r\n                    this.col.levels[1],\r\n                    this.col.levels[2],\r\n                    trailAlpha\r\n                  );\r\n                  p.point(this.trail[i].x, this.trail[i].y);\r\n                }\r\n              }\r\n            }\r\n          \r\n            // Draw the main particle shape\r\n            p.push();\r\n            p.translate(this.pos.x, this.pos.y); // Move to particle position\r\n            p.rotate(rotationAngle); // Rotate based on velocity direction\r\n          \r\n            // Apply speed-based rotation scaling (optional)\r\n            const rotationSpeed = this.vel.mag() * 0.01; // Scale speed to adjust rotation dynamics\r\n            p.rotate(p.frameCount * rotationSpeed);\r\n          \r\n            p.fill(this.col.levels[0], this.col.levels[1], this.col.levels[2], alpha);\r\n          \r\n            // Draw shape based on shapeType\r\n            if (this.shapeType === 'circle') {\r\n              p.ellipse(0, 0, normalizedSize, normalizedSize);\r\n            } else if (this.shapeType === 'square') {\r\n              const halfSize = normalizedSize / 2;\r\n              p.rect(-halfSize, -halfSize, normalizedSize, normalizedSize);\r\n            } else if (this.shapeType === 'triangle') {\r\n              const halfSize = normalizedSize / 2;\r\n              p.triangle(\r\n                0, -halfSize, // Top vertex\r\n                -halfSize, halfSize, // Bottom-left vertex\r\n                halfSize, halfSize // Bottom-right vertex\r\n              );\r\n            }\r\n          \r\n            p.pop(); // Reset transformations\r\n          }        \r\n                      \r\n          // Check if the particle is done (lifespan is 0)\r\n          isDone() {\r\n            return this.lifespan <= 0; // Particle is done when lifespan is depleted\r\n          }\r\n        }\r\n        \r\n        class Firework {\r\n          constructor(x, y, targetX, targetY, col, type) {\r\n            this.firework = new Particle(x, y, col, true, 4, type);\r\n            this.particles = [];\r\n            this.exploded = false;\r\n            this.targetX = targetX;\r\n        \r\n            // Adjust explosion location based on screen width\r\n            if (p.windowWidth < 768) {\r\n              // For screens smaller than 768px, make the explosion higher on the screen\r\n              this.targetX = p.random(p.width * 0.5, p.width * 0.9);  \r\n              this.targetY = p.random(p.height * 0.1, p.height * 0.3);  \r\n              } else if (p.windowWidth >= 768 && p.windowWidth <= 1024) {\r\n              // For screens between 768px and 1024px, make the explosion in the middle\r\n              this.targetX = p.random(p.width * 0.65, p.width * 0.9);  \r\n              this.targetY = p.random(p.height * 0.05, p.height * 0.3);  \r\n              } else {\r\n              // For screens larger than 1024px, make the explosion lower on the screen\r\n              this.targetX = p.random(p.width * 0.3, p.width * 0.7);  \r\n              this.targetY = p.random(p.height * 0.05, p.height * 0.4);  \r\n            }\r\n        \r\n            this.col = col;\r\n            this.type = type;\r\n            this.explosionStartTime = -1;\r\n\r\n            // Particle amount logic\r\n            let baseCount;\r\n          if (p.windowWidth < 768) {\r\n            baseCount = type === 'BLINKING'\r\n              ? p.random(150, 275)\r\n              : p.random(125, 225);\r\n          } else if (p.windowWidth <= 1024) {\r\n            baseCount = type === 'BLINKING'\r\n              ? p.random(275, 325)\r\n              : p.random(200, 250); // Fewer PROJECTILE particles on medium screens\r\n          } else {\r\n            baseCount = type === 'BLINKING'\r\n              ? p.random(250, 300)\r\n              : p.random(300, 350);\r\n            }\r\n            this.numParticles = Math.floor(baseCount);\r\n          }\r\n        \r\n          explode() {\r\n            // Capture the firework's initial velocity to influence explosion particles\r\n            let initialVel = this.firework.vel.copy(); // Copy firework's velocity to influence explosion\r\n            \r\n            //limit particle count for larger ones between 25 to 50\r\n            const largerParticleCount = this.type === 'PROJECTILE' ? Math.floor(p.random(25, 50)) : 0;\r\n\r\n            for (let i = 0; i < this.numParticles; i++) {\r\n              let size;\r\n          \r\n              // Assign size based on whether it's a larger particle or a regular one\r\n              if (this.type === 'PROJECTILE' && i < largerParticleCount) {\r\n                size = p.random(10, 12); // Extra large particles for PROJECTILE\r\n              } else {\r\n                size = this.type === 'BLINKING' ? p.random(1, 9) : p.random(1, 8); // Smaller particles\r\n              }\r\n          \r\n              let speed = this.type === 'BLINKING'\r\n              ? (() => {\r\n                  // Inline definition for BLINKING firework speed calculation\r\n                  let speed;\r\n                  if (size >= 1 && size < 2) {\r\n                    speed = p.random(0.5, 2.7);\r\n                  } else if (size >= 2 && size < 3) {\r\n                    speed = p.random(2.5, 4.7);\r\n                  } else if (size >= 3 && size < 4) {\r\n                    speed = p.random(4.5, 6.7);\r\n                  } else if (size >= 4 && size < 5) {\r\n                    speed = p.random(6.5, 8.7);\r\n                  } else if (size >= 5 && size < 6) {\r\n                    speed = p.random(8.5, 8.7);\r\n                  } else if (size >= 6 && size < 7) {\r\n                    speed = p.random(8.8, 9);\r\n                  } else if (size >= 7 && size < 8) {\r\n                    speed = p.random(9.1, 9.2);\r\n                  } else if (size >= 8 && size < 9) {\r\n                    speed = p.random(9.2, 9.3);\r\n                  } else {\r\n                    speed = p.random(9.4, 9.5);\r\n                  }\r\n                  return adjustForScreenWidth(speed);\r\n                })()\r\n              : (() => {\r\n                  // Inline definition for PROJECTILE firework speed calculation\r\n                  let speed;\r\n                  if (size >= 1 && size < 7) {\r\n                    speed = p.random(1, 9);\r\n                  } else if (size >= 7 && size < 9) {\r\n                    speed = p.random(8, 9);\r\n                  } else if (size >= 10 && size < 12) {\r\n                    speed = p.random(9, 9.2);\r\n                  } else {\r\n                    speed = p.random(1, 4);\r\n                  }\r\n                  return adjustForScreenWidth(speed);\r\n                })();\r\n            \r\n            // Function to adjust speed based on screen size\r\n            function adjustForScreenWidth(speed) {\r\n              let screenWidth = p.windowWidth;\r\n              let screenMultiplier = 1; // Default multiplier\r\n            \r\n              if (screenWidth < 768) {\r\n                screenMultiplier = p.random(1.8, 2.6);\r\n              } else if (screenWidth >= 768 && screenWidth <= 1024) {\r\n                screenMultiplier = p.random(1.6, 2.2);\r\n              } else if (screenWidth > 1024) {\r\n                screenMultiplier = p.random(1.2, 2.2);\r\n              } \r\n              return speed * screenMultiplier;\r\n            }\r\n          \r\n              let angle = p.random(p.TWO_PI);\r\n              let velocity = p.createVector(p.cos(angle), p.sin(angle)).mult(speed);\r\n              \r\n              // Apply a smaller influence from firework velocity if particle is in line with the projectile\r\n              let angleDiff = Math.abs(p.atan2(velocity.y, velocity.x) - p.atan2(initialVel.y, initialVel.x));\r\n              \r\n              // If angle difference is small (i.e., the particle is moving along the same vector as the firework's trajectory), apply less multiplier\r\n              let velocityMultiplier = angleDiff < p.HALF_PI / 4 ? p.random(0, 0.5) : p.random(0.5, 0.8);\r\n              velocity.add(initialVel.mult(velocityMultiplier)); // Small influence from projectile velocity\r\n          \r\n              let hasTrail = size > 6; // Larger particles have trails\r\n                  \r\n              let type = 'BLINKING';\r\n              let particle = new Particle(\r\n                this.firework.pos.x + p.random(-2, 6),\r\n                this.firework.pos.y + p.random(-2, 6),\r\n                this.col,\r\n                false,\r\n                size,\r\n                type,\r\n                hasTrail\r\n              );\r\n                  \r\n              particle.vel = velocity;\r\n              this.particles.push(particle);\r\n            }\r\n            this.exploded = true;\r\n            this.explosionStartTime = p.millis();\r\n          }\r\n          \r\n          update() {\r\n            if (!this.exploded) {\r\n              let direction = p.createVector(this.targetX - this.firework.pos.x, this.targetY - this.firework.pos.y);\r\n              direction.normalize();\r\n              let launchSpeed;\r\n                if (p.windowWidth < 768) {\r\n                  launchSpeed = p.random(6, 11);\r\n                } else if (p.windowWidth <= 1024) {\r\n                  launchSpeed = p.random(5, 9); // Moderate speed boost for medium screens\r\n                } else {\r\n                  launchSpeed = p.random(3, 8);\r\n                }\r\n\r\n              direction.mult(launchSpeed);\r\n              this.firework.vel = direction;\r\n              this.firework.update();\r\n              if (p.dist(this.firework.pos.x, this.firework.pos.y, this.targetX, this.targetY) < 10) {\r\n                this.explode();\r\n              }\r\n            }\r\n            for (let i = this.particles.length - 1; i >= 0; i--) {\r\n              let particle = this.particles[i];\r\n              particle.applyForce(p.createVector(0, 0.160));  // Apply gravity force\r\n              particle.update();\r\n              if (particle.isDone()) {\r\n                this.particles.splice(i, 1);\r\n              }\r\n            }\r\n          }\r\n\r\n          show() {\r\n            if (!this.exploded) {\r\n              this.firework.show();\r\n            }\r\n            for (let particle of this.particles) {\r\n              particle.show();\r\n            }\r\n          }\r\n        }\r\n\r\n        function addNewFirework(fireworkType) {\r\n\r\n          const startX = p.width / 2;\r\n          const startY = p.height;\r\n\r\n          const selectedAlt1 = latestItems.current?.[0]?.alt1 || '';\r\n          const colorArray = latestColorMapping.current[selectedAlt1] || [];\r\n\r\n          // Early exit if no colors are available\r\n          if (!colorArray.length) {\r\n            console.warn(`No colors available for alt1: '${selectedAlt1}'`);\r\n            return;\r\n          }\r\n\r\n          let topColorCount;\r\n          if (p.windowWidth >= 1025) {\r\n            topColorCount = 3;\r\n          } else if (p.windowWidth >= 768) {\r\n            topColorCount = 2;\r\n          } else {\r\n            topColorCount = 1;\r\n          }\r\n\r\n          // Safely extract just 0, 1, and 3 (skip index 2)\r\n          const usableColors = [\r\n            colorArray[0],\r\n            colorArray[1],\r\n            colorArray[3],\r\n          ].filter(Boolean); // filter out undefined if array is incomplete\r\n          if (usableColors.length === 0) return;\r\n\r\n          const randomHex = usableColors[Math.floor(p.random(usableColors.length))]; // Pick one color\r\n\r\n          const brightnessMultiplier = p.random(1, 1.4);\r\n          const adjustedHex = adjustBrightness(randomHex, brightnessMultiplier);\r\n          const fireworkColor = p.color(adjustedHex);\r\n\r\n          const targetX = p.width / 2 + p.random(-50, 50);\r\n          const targetY = fireworkType === 'BLINKING' ? p.height * 0.2 : p.height * 0.7;\r\n\r\n          lastLaunchPosition = p.createVector(targetX, targetY);\r\n          fireworks.push(new Firework(startX, startY, targetX, targetY, fireworkColor, fireworkType));\r\n        }\r\n\r\n        p.setup = () => {\r\n          p.createCanvas(p.windowWidth, p.windowHeight);\r\n          const firstFireworkType = Math.random() < 0.5 ? 'BLINKING' : 'PROJECTILE'; // Randomize first firework type\r\n          addNewFirework(firstFireworkType); // Launch the first firework\r\n          lastFireworkTime = p.millis(); // Reset lastFireworkTime after the first launch\r\n        };      \r\n\r\n        hiddenDurationRef.current = 0;\r\n        lastFireworkTime = 0;\r\n        \r\n        let fireworkToggle = true; // Starts with BLINKING\r\n        let nextFireworkDelay = p.random(3000, 7000); // Random delay between 2000ms and 5000ms\r\n\r\n        p.draw = () => {\r\n          if (isRealMobileRef.current) {\r\n            p.clear(); // transparent\r\n          } else {\r\n            p.background('#1e1e1f'); // fallback\r\n          }\r\n            \r\n          if (!fireworksEnabledRef.current) {\r\n            fireworksRef.current.length = 0;\r\n            return;\r\n          }\r\n\r\n          for (let firework of fireworks) {\r\n            firework.update();\r\n            firework.show();\r\n          }\r\n\r\n          const adjustedTime = p.millis() - hiddenDurationRef.current;\r\n\r\n          // Fix: fallback in case adjustedTime went backward or got corrupted\r\n          if (adjustedTime < lastFireworkTime) {\r\n            console.warn(\"Adjusted time went backward or stale. Forcing firework reset.\");\r\n            lastFireworkTime = adjustedTime - nextFireworkDelay - 1;\r\n          }\r\n\r\n          // Regular triggering condition\r\n          if (adjustedTime - lastFireworkTime > nextFireworkDelay) {\r\n            const fireworkType = fireworkToggle ? 'BLINKING' : 'PROJECTILE';\r\n            addNewFirework(fireworkType);\r\n            fireworkToggle = !fireworkToggle;\r\n            lastFireworkTime = adjustedTime;\r\n            nextFireworkDelay = p.random(2000, 8000);\r\n          }\r\n        };\r\n      };\r\n      \r\n    p5InstanceRef.current = new q5(sketch, canvasRef.current);\r\n\r\n    return () => {\r\n      destroyed = true;\r\n      if (p5InstanceRef.current) {\r\n        p5InstanceRef.current.remove();\r\n        p5InstanceRef.current = null;\r\n      }\r\n      fireworksRef.current = [];\r\n    };\r\n  }, []);\r\n\r\n  const toggleFireworks = useCallback((isEnabled) => {\r\n    setFireworksEnabled(isEnabled);\r\n    fireworksEnabledRef.current = isEnabled; // update live value for q5\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (onToggleFireworks) {\r\n      onToggleFireworks(toggleFireworks);\r\n    }\r\n  }, [onToggleFireworks, toggleFireworks]); // Ensure dependencies are stable  \r\n\r\n  return <div ref={canvasRef}></div>;\r\n};\r\n\r\nexport default FireworksDisplay;"],"names":["FireworksDisplay","colorMapping","items","lastKnownColor","onToggleFireworks","canvasRef","useRef","fireworksEnabled","setFireworksEnabled","useState","fireworksRef","fireworksEnabledRef","isPageHiddenRef","hiddenStartTimeRef","hiddenDurationRef","isRealMobile","useRealMobileViewport","isRealMobileRef","useEffect","current","handleVisibilityChange","document","visibilityState","performance","now","addEventListener","removeEventListener","p5InstanceRef","latestItems","latestColorMapping","latestLastKnownColor","destroyed","q5","p","fireworks","lastFireworkTime","lastLaunchPosition","createVector","width","height","Particle","constructor","x","y","c","firework","size","type","hasTrail","minLifespan","maxLifespan","this","pos","vel","random","mult","acc","col","adjustBrightness","shapeType","windowWidth","lifespan","map","trailLength","trail","Array","fill","initialSpeed","mag","trailLifespan","fadeFactor","blinkingSpeed","blinkingAlpha","baseColor","multiplier","r","Math","min","max","levels","g","b","color","applyForce","force","add","update","pop","unshift","copy","i","length","gravityForce","abs","sin","millis","show","alpha","noStroke","shrinkSize","shrinkFactor","pow","normalizedSize","rotationAngle","atan2","trailAlpha","trailSize","strokeWeight","stroke","point","push","translate","rotate","rotationSpeed","frameCount","ellipse","halfSize","rect","triangle","isDone","Firework","targetX","targetY","baseCount","particles","exploded","explosionStartTime","numParticles","floor","explode","initialVel","largerParticleCount","speed","adjustForScreenWidth","screenWidth","screenMultiplier","angle","TWO_PI","velocity","cos","velocityMultiplier","HALF_PI","particle","launchSpeed","direction","normalize","dist","splice","addNewFirework","fireworkType","startX","startY","selectedAlt1","alt1","colorArray","console","warn","topColorCount","usableColors","filter","Boolean","adjustedHex","hex","parseInt","slice","toString","padStart","fireworkColor","setup","createCanvas","windowHeight","fireworkToggle","nextFireworkDelay","draw","clear","background","adjustedTime","remove","toggleFireworks","useCallback","isEnabled","_jsx","ref"],"sourceRoot":""}