{"version":3,"file":"static/js/dynamic-shadow.8f1a1416.chunk.js","mappings":"8LAOA,MAsDA,EAtDqCA,IAAkB,IAAjB,QAAEC,GAASD,EAC/C,MAAOE,EAAQC,IAAaC,EAAAA,EAAAA,UAA6B,OAEzDC,EAAAA,EAAAA,WAAU,KACR,GAAwB,qBAAbC,SAA0B,OAErC,MAAMC,EAAYD,SAASE,eAAeP,GAC1C,IAAKM,EAAW,OAEhB,MAAME,EAAUA,KACd,MAAMC,EAAUH,EAAUI,cAA2B,oBAAsB,KAC3E,QAAID,IACFP,EAAUO,IACH,IAKX,GAAID,IAAW,OAEf,MAAMG,EAAW,IAAIC,iBAAiB,KAChCJ,KAAWG,EAASE,eAG1B,OADAF,EAASG,QAAQR,EAAW,CAAES,WAAW,EAAMC,SAAS,IACjD,IAAML,EAASE,cACrB,CAACb,KAGJI,EAAAA,EAAAA,WAAU,KACR,IAAKH,EAAQ,OACb,MAAMgB,EAAS,CAAEC,GAAIjB,EAAQD,WAE7B,OADAmB,OAAOC,cAAc,IAAIC,YAAY,uBAAwB,CAAEJ,YACxD,KACLE,OAAOC,cAAc,IAAIC,YAAY,yBAA0B,CAAEJ,cAElE,CAAChB,EAAQD,IAWZ,OAAKC,EAEEqB,EAAAA,cACLC,EAAAA,EAAAA,KAACC,EAAAA,QAAiB,CAACC,cAAeA,OAAUC,QAX1BC,KAElB,MAAMC,EAASvB,SAASE,eAAe,0BACnCqB,IAAQA,EAAOC,MAAMC,QAAU,QAEnCX,OAAOC,cAAc,IAAIC,YAAY,4BAOrCpB,GAJkB,K,oGC7CtB,IAAI8B,EAAe,CAAC,EAChBC,EAAkC,KAE/B,SAASC,IACd,OAAOF,CACT,CAiBOG,eAAeC,IACpB,OAAIJ,EAAMK,OAASL,EAAMM,OAAeN,EACpCC,SACIA,EACCD,GAEFA,CACT,CAEOG,eAAeI,IAEpB,IAAKP,EAAMK,OAASJ,EAElB,aADMA,EACCD,EAAMK,OAAS,CAAC,EAEzB,GAAIL,EAAMK,MAAO,OAAOL,EAAMK,MAE9B,IAAIG,EACJ,IACEA,QAAiBC,EAAAA,EAAAA,IACnB,CAAE,MAAAC,GACAF,EAAW,EACb,CACA,MACMH,EAlCR,SAAmBM,GACjB,OAAOA,EAAKC,OAAO,CAACC,EAAKC,KAAQ,IAADC,EAC9B,GAAO,OAAFD,QAAE,IAAFA,IAAAA,EAAIE,MAAO,OAAOH,EACvB,MAAMI,EAAa,QAAVF,EAAGD,EAAGI,YAAI,IAAAH,EAAAA,EAAID,EAAGK,IAE1B,MADmB,kBAARF,GAAoBA,EAAIG,OAAS,IAAGP,EAAIC,EAAGE,OAASC,GACxDJ,GACN,CAAC,EACN,CA2BgBQ,CADDC,MAAMC,QAAQf,GAAaA,EAA0B,IAGlE,OADAR,EAAMK,MAAQA,EACPA,CACT,CAEOF,eAAeqB,IAEpB,IAAKxB,EAAMM,QAAUL,EAEnB,aADMA,EACCD,EAAMM,QAAU,GAEzB,GAAIN,EAAMM,OAAQ,OAAON,EAAMM,OAE/B,IAAImB,EACJ,IACEA,QAAkBC,EAAAA,EAAAA,IACpB,CAAE,MAAAC,GACAF,EAAY,EACd,CACA,MAAMnB,EAASgB,MAAMC,QAAQE,GAAcA,EAAsB,GAEjE,OADAzB,EAAMM,OAASA,EACRA,CACT,CAGOH,eAAeyB,IACpB,OAAI5B,EAAMK,OAASL,EAAMM,OAAeN,EACpCC,IAEJA,EAAW4B,QAAQC,IAAI,CAACvB,IAAsBiB,MAC3CO,KAAK/D,IAAsB,IAApBqC,EAAOC,GAAOtC,EAEpB,OADAgC,EAAQ,CAAEK,QAAOC,UACVN,IAERgC,QAAQ,KACP/B,EAAW,OAGRA,EACT,CA9EO,IAAsBgC,EAsFP,qBAAX7C,QAA2BA,OAAe8C,sBAtFxBD,EAuFb7C,OAAe8C,uBArF7BlC,GAAKmC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQnC,GAAUiC,G,kDCdlB,SAASG,IACd,MAAOC,EAAcC,IAAmBlE,EAAAA,EAAAA,WAAS,GAsCjD,OApCAC,EAAAA,EAAAA,WAAU,KACR,MAAMkE,EAAcA,KAAO,IAADC,EAAAC,EAAAC,EACxB,MAAMC,EAAQC,UAAUC,eAAiB,EACnCC,EAAyD,QAAnDN,EAAoB,QAApBC,GAAGC,EAAAtD,QAAO2D,kBAAU,IAAAN,OAAA,EAAjBA,EAAAO,KAAAN,EAAoB,qBAAqBO,eAAO,IAAAT,GAAAA,EACzDU,EAAQ9D,OAAO+D,WACfC,EAAKR,UAAUS,WAAaT,UAAUU,QAAWlE,OAAemE,MAGhEC,EAAQ,mBAAmBC,KAAKL,IACZ,aAAvBR,UAAUc,UAA2Bf,EAGlCgB,EAAY,UAAUF,KAAKL,GAWjCd,EALGK,GAASO,GAAS,MACnBM,GACAG,GACAb,IASJ,OAJAP,IACAnD,OAAOwE,iBAAiB,SAAUrB,GAClCnD,OAAOwE,iBAAiB,oBAAqBrB,GAEtC,KACLnD,OAAOyE,oBAAoB,SAAUtB,GACrCnD,OAAOyE,oBAAoB,oBAAqBtB,KAEjD,IAEIF,CACT,C,kDCxCO,MAAMX,EAAcvB,iBAAmC,IACxD2D,EAAc,GAClB,OAF0CC,UAAA3C,OAAA,QAAA4C,IAAAD,UAAA,GAAAA,UAAA,GAAG,WAG3C,IAAK,WAAaD,EAAc,qBAAsB,MACtD,IAAK,YAAaA,EAAc,sBAAuB,MACvD,IAAK,UAAaA,EAAc,0BAA2B,MAC3D,IAAK,WAAaA,EAAc,2BAGlC,MAAMG,EAAK,4BAAAC,OAA+BJ,EAAW,4OAcrD,IAEE,aADmBK,EAAAA,QAAaC,MAAMH,EAExC,CAAE,MAAOI,GAEP,OADAC,QAAQD,MAAM,wBAAyBA,GAChC,EACT,CACF,C,kDC9BelE,eAAeM,IAO5B,aADoB0D,EAAAA,QAAaC,MALtB,wMAOb,C","sources":["components/dynamic-app/shadow-entry.tsx","dynamic-app/preload-dynamic-app.ts","utils/content-utility/real-mobile.ts","dynamic-app/lib/fetchUser.js","dynamic-app/lib/fetchSVGIcons.js"],"sourcesContent":["// src/components/dynamic-app/shadow-entry.tsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport DynamicAppInbound from '../../dynamic-app/dynamic-app-shadow.jsx';\r\n\r\ntype Props = { blockId: string };\r\n\r\nconst ShadowEntry: React.FC<Props> = ({ blockId }) => {\r\n  const [target, setTarget] = useState<HTMLElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (typeof document === 'undefined') return;\r\n\r\n    const container = document.getElementById(blockId);\r\n    if (!container) return;\r\n\r\n    const tryFind = () => {\r\n      const overlay = container.querySelector<HTMLElement>('.screen-overlay') || null;\r\n      if (overlay) {\r\n        setTarget(overlay);\r\n        return true;\r\n      }\r\n      return false;\r\n    };\r\n\r\n    if (tryFind()) return;\r\n\r\n    const observer = new MutationObserver(() => {\r\n      if (tryFind()) observer.disconnect();\r\n    });\r\n    observer.observe(container, { childList: true, subtree: true });\r\n    return () => observer.disconnect();\r\n  }, [blockId]);\r\n\r\n  // Announce mount/unmount of the embedded scroll container to the outer controller\r\n  useEffect(() => {\r\n    if (!target) return;\r\n    const detail = { el: target, blockId };\r\n    window.dispatchEvent(new CustomEvent('embedded-app:mounted', { detail }));\r\n    return () => {\r\n      window.dispatchEvent(new CustomEvent('embedded-app:unmounted', { detail }));\r\n    };\r\n  }, [target, blockId]);\r\n\r\n  // Called by DynamicAppInbound (guarded there) on first paint\r\n  const handleReady = () => {\r\n    // hide any SSR/client spinner if present\r\n    const loader = document.getElementById('dynamic-overlay-loader');\r\n    if (loader) loader.style.display = 'none';\r\n    // notify listeners (e.g. enhancer / other logic)\r\n    window.dispatchEvent(new CustomEvent('dynamic-app:hydrated'));\r\n  };\r\n\r\n  if (!target) return null;\r\n\r\n  return ReactDOM.createPortal(\r\n    <DynamicAppInbound onFocusChange={() => {}} onReady={handleReady} />,\r\n    target\r\n  );\r\n};\r\n\r\nexport default ShadowEntry;\r\n","// src/dynamic-app/preload-dynamic-app.ts\r\nimport fetchSVGIcons from './lib/fetchSVGIcons';\r\nimport { fetchImages } from './lib/fetchUser';\r\n\r\nexport type Cache = { icons?: Record<string, string>; images?: any[] };\r\n\r\ntype IconLike = { title?: string; icon?: string; url?: string };\r\n\r\nlet cache: Cache = {};\r\nlet inFlight: Promise<Cache> | null = null;\r\n\r\nexport function getPreloadedDynamicApp(): Cache {\r\n  return cache;\r\n}\r\n\r\nexport function primeFromSSR(data?: Partial<Cache>) {\r\n  if (!data) return;\r\n  cache = { ...cache, ...data };\r\n}\r\n\r\nfunction toIconMap(list: IconLike[]): Record<string, string> {\r\n  return list.reduce((acc, it) => {\r\n    if (!it?.title) return acc;\r\n    const val = it.icon ?? it.url; // inline SVG takes precedence; else URL\r\n    if (typeof val === 'string' && val.length > 0) acc[it.title] = val;\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\n/** Wait for current preloading (if any), then return cache */\r\nexport async function whenDynamicPreloadReady(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) {\r\n    await inFlight;\r\n    return cache;\r\n  }\r\n  return cache;\r\n}\r\n\r\nexport async function ensureIconsPreload(): Promise<Record<string, string>> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.icons && inFlight) {\r\n    await inFlight;\r\n    return cache.icons || {};\r\n  }\r\n  if (cache.icons) return cache.icons;\r\n\r\n  let iconsRaw: unknown;\r\n  try {\r\n    iconsRaw = await fetchSVGIcons();\r\n  } catch {\r\n    iconsRaw = [];\r\n  }\r\n  const list = Array.isArray(iconsRaw) ? (iconsRaw as IconLike[]) : [];\r\n  const icons = toIconMap(list);\r\n  cache.icons = icons;\r\n  return icons;\r\n}\r\n\r\nexport async function ensureImagesPreload(): Promise<any[]> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.images && inFlight) {\r\n    await inFlight;\r\n    return cache.images || [];\r\n  }\r\n  if (cache.images) return cache.images;\r\n\r\n  let imagesRaw: unknown;\r\n  try {\r\n    imagesRaw = await fetchImages();\r\n  } catch {\r\n    imagesRaw = [];\r\n  }\r\n  const images = Array.isArray(imagesRaw) ? (imagesRaw as any[]) : [];\r\n  cache.images = images;\r\n  return images;\r\n}\r\n\r\n/** Convenience: ensure both icons + images (with in-flight dedupe) */\r\nexport async function ensureDynamicPreload(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) return inFlight;\r\n\r\n  inFlight = Promise.all([ensureIconsPreload(), ensureImagesPreload()])\r\n    .then(([icons, images]) => {\r\n      cache = { icons, images };\r\n      return cache;\r\n    })\r\n    .finally(() => {\r\n      inFlight = null;\r\n    });\r\n\r\n  return inFlight;\r\n}\r\n\r\n// Optional: hydrate from SSR\r\ndeclare global {\r\n  interface Window {\r\n    __DYNAMIC_PRELOAD__?: Cache;\r\n  }\r\n}\r\nif (typeof window !== 'undefined' && (window as any).__DYNAMIC_PRELOAD__) {\r\n  primeFromSSR((window as any).__DYNAMIC_PRELOAD__);\r\n}\r\n","// useRealMobileViewport.ts\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useRealMobileViewport() {\r\n  const [isRealMobile, setIsRealMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const touch = navigator.maxTouchPoints > 0;\r\n      const coarse = window.matchMedia?.('(pointer: coarse)').matches ?? false;\r\n      const width = window.innerWidth;\r\n      const ua = navigator.userAgent || navigator.vendor || (window as any).opera;\r\n\r\n      // iOS detection (iPhone / iPad)\r\n      const isIOS = /iPad|iPhone|iPod/.test(ua) ||\r\n        (navigator.platform === 'MacIntel' && touch); // iPadOS pretends to be Mac\r\n\r\n      // Android detection\r\n      const isAndroid = /Android/.test(ua);\r\n\r\n      // Consider it real mobile if:\r\n      // - Touch exists, and viewport is small, or\r\n      // - Known mobile UA\r\n      const realMobile =\r\n        (touch && width <= 1024) ||\r\n        isIOS ||\r\n        isAndroid ||\r\n        coarse;\r\n\r\n      setIsRealMobile(realMobile);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    window.addEventListener('orientationchange', checkMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n      window.removeEventListener('orientationchange', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  return isRealMobile;\r\n}\r\n","// lib/fetchUser.ts\r\nimport sanityClient from '../../utils/sanity';\r\n\r\nexport const fetchImages = async (sortOption = 'default') => {\r\n  let orderClause = '';\r\n  switch (sortOption) {\r\n    case 'titleAsc':  orderClause = '| order(title asc)'; break;\r\n    case 'titleDesc': orderClause = '| order(title desc)'; break;\r\n    case 'dateAsc':   orderClause = '| order(_createdAt asc)'; break;\r\n    case 'dateDesc':  orderClause = '| order(_createdAt desc)'; break;\r\n  }\r\n\r\n  const query = `*[_type == \"imageAsset\"] ${orderClause} {\r\n    _id,\r\n    title,\r\n    description,\r\n    // dereference to get real URLs on the server\r\n    image1{ ..., asset->{ url } },\r\n    image2{ ..., asset->{ url } },\r\n    caption1,\r\n    alt1,\r\n    alt2,\r\n    iconName,\r\n    url1\r\n  }`;\r\n\r\n  try {\r\n    const data = await sanityClient.fetch(query);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching images', error);\r\n    return [];\r\n  }\r\n};\r\n","/* Fetch SVG icons */\r\nimport sanityClient from '../../utils/sanity';\r\n\r\nexport default async function fetchSVGIcons() {\r\n  const query = `*[_type == \"svgIcon\"]{\r\n    title,\r\n    icon,                         // inline SVG string (portable text / string)\r\n    \"url\": file.asset->url        // optional file URL if present in schema\r\n  }`;\r\n  const icons = await sanityClient.fetch(query);\r\n  return icons;\r\n}"],"names":["_ref","blockId","target","setTarget","useState","useEffect","document","container","getElementById","tryFind","overlay","querySelector","observer","MutationObserver","disconnect","observe","childList","subtree","detail","el","window","dispatchEvent","CustomEvent","ReactDOM","_jsx","DynamicAppInbound","onFocusChange","onReady","handleReady","loader","style","display","cache","inFlight","getPreloadedDynamicApp","async","whenDynamicPreloadReady","icons","images","ensureIconsPreload","iconsRaw","fetchSVGIcons","_unused","list","reduce","acc","it","_it$icon","title","val","icon","url","length","toIconMap","Array","isArray","ensureImagesPreload","imagesRaw","fetchImages","_unused2","ensureDynamicPreload","Promise","all","then","finally","data","__DYNAMIC_PRELOAD__","_objectSpread","useRealMobileViewport","isRealMobile","setIsRealMobile","checkMobile","_window$matchMedia$ma","_window$matchMedia","_window","touch","navigator","maxTouchPoints","coarse","matchMedia","call","matches","width","innerWidth","ua","userAgent","vendor","opera","isIOS","test","platform","isAndroid","addEventListener","removeEventListener","orderClause","arguments","undefined","query","concat","sanityClient","fetch","error","console"],"sourceRoot":""}