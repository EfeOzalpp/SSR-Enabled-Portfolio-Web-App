{"version":3,"file":"static/js/dynamic-frame.93f1fb23.chunk.js","mappings":"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","sources":["utils/loading/loading-hub.tsx","dynamic-app/preload-dynamic-app.ts","components/dynamic-app/frame.tsx","utils/content-utility/dynamic-overlay.ts","utils/content-utility/real-mobile.ts","dynamic-app/lib/fetchUser.js","dynamic-app/lib/fetchSVGIcons.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport '../../styles/loading-hub.css';\r\n\r\ntype LoadingHubProps = {\r\n  keyword?: string;\r\n  lines?: string[];\r\n  minHeight?: number | string;\r\n  className?: string;\r\n  ariaLabel?: string;\r\n  progress?: number | null;\r\n  cycleMs?: number;\r\n  animMs?: number;\r\n  /** Delay before showing loader (ms) */\r\n  delayMs?: number;\r\n};\r\n\r\nexport default function LoadingHub({\r\n  keyword,\r\n  lines = ['Loadingâ€¦'],\r\n  minHeight = 160,\r\n  className = '',\r\n  ariaLabel = 'Loading',\r\n  progress = null,\r\n  cycleMs = 1400,\r\n  animMs = 900,\r\n  delayMs = 400,\r\n}: LoadingHubProps) {\r\n  const [lineIndex, setLineIndex] = useState(0);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // --- delay before showing loader ---\r\n  useEffect(() => {\r\n    const t = setTimeout(() => setShow(true), delayMs);\r\n    return () => clearTimeout(t);\r\n  }, [delayMs]);\r\n\r\n  // rotate through provided lines\r\n  const hasMultiple = lines.length > 1;\r\n  useEffect(() => {\r\n    if (!hasMultiple) return;\r\n    const t = setInterval(() => {\r\n      setLineIndex((i) => (i + 1) % lines.length);\r\n    }, cycleMs);\r\n    return () => clearInterval(t);\r\n  }, [hasMultiple, lines.length, cycleMs]);\r\n\r\n  // Avoid reflow: lock container height\r\n  const style = useMemo<React.CSSProperties>(() => {\r\n    const h = typeof minHeight === 'number' ? `${minHeight}px` : (minHeight ?? 'auto');\r\n    return { minHeight: h };\r\n  }, [minHeight]);\r\n\r\n  // SR-only progressive percent\r\n  const srRef = useRef<HTMLSpanElement>(null);\r\n  useEffect(() => {\r\n    if (progress == null || !srRef.current) return;\r\n    srRef.current.textContent = `${Math.round(progress)}%`;\r\n  }, [progress]);\r\n\r\n  if (!show) {\r\n    // render an invisible placeholder with locked height\r\n    return <div style={style} aria-hidden=\"true\" />;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`loading-hub loading-hub--text ${className || ''}`}\r\n      style={style}\r\n      role=\"status\"\r\n      aria-live=\"polite\"\r\n      aria-label={ariaLabel}\r\n      data-keyword={keyword || undefined}\r\n      data-anim-ms={animMs}\r\n    >\r\n      <div className=\"loading-hub__copy\" aria-hidden={false}>\r\n        <h2 key={lineIndex} className=\"loading-hub__line\">\r\n          {lines[lineIndex]}\r\n        </h2>\r\n\r\n        {progress != null && (\r\n          <div className=\"loading-hub__progress\" aria-hidden=\"true\">\r\n            {Math.round(progress)}%\r\n          </div>\r\n        )}\r\n\r\n        <span className=\"sr-only\" ref={srRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","// src/dynamic-app/preload-dynamic-app.ts\r\nimport fetchSVGIcons from './lib/fetchSVGIcons';\r\nimport { fetchImages } from './lib/fetchUser';\r\n\r\nexport type Cache = { icons?: Record<string, string>; images?: any[] };\r\n\r\ntype IconLike = { title?: string; icon?: string; url?: string };\r\n\r\nlet cache: Cache = {};\r\nlet inFlight: Promise<Cache> | null = null;\r\n\r\nexport function getPreloadedDynamicApp(): Cache {\r\n  return cache;\r\n}\r\n\r\nexport function primeFromSSR(data?: Partial<Cache>) {\r\n  if (!data) return;\r\n  cache = { ...cache, ...data };\r\n}\r\n\r\nfunction toIconMap(list: IconLike[]): Record<string, string> {\r\n  return list.reduce((acc, it) => {\r\n    if (!it?.title) return acc;\r\n    const val = it.icon ?? it.url; // inline SVG takes precedence; else URL\r\n    if (typeof val === 'string' && val.length > 0) acc[it.title] = val;\r\n    return acc;\r\n  }, {} as Record<string, string>);\r\n}\r\n\r\n/** Wait for current preloading (if any), then return cache */\r\nexport async function whenDynamicPreloadReady(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) {\r\n    await inFlight;\r\n    return cache;\r\n  }\r\n  return cache;\r\n}\r\n\r\nexport async function ensureIconsPreload(): Promise<Record<string, string>> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.icons && inFlight) {\r\n    await inFlight;\r\n    return cache.icons || {};\r\n  }\r\n  if (cache.icons) return cache.icons;\r\n\r\n  let iconsRaw: unknown;\r\n  try {\r\n    iconsRaw = await fetchSVGIcons();\r\n  } catch {\r\n    iconsRaw = [];\r\n  }\r\n  const list = Array.isArray(iconsRaw) ? (iconsRaw as IconLike[]) : [];\r\n  const icons = toIconMap(list);\r\n  cache.icons = icons;\r\n  return icons;\r\n}\r\n\r\nexport async function ensureImagesPreload(): Promise<any[]> {\r\n  // If a full preloading is in-flight, wait for it instead of double-fetching\r\n  if (!cache.images && inFlight) {\r\n    await inFlight;\r\n    return cache.images || [];\r\n  }\r\n  if (cache.images) return cache.images;\r\n\r\n  let imagesRaw: unknown;\r\n  try {\r\n    imagesRaw = await fetchImages();\r\n  } catch {\r\n    imagesRaw = [];\r\n  }\r\n  const images = Array.isArray(imagesRaw) ? (imagesRaw as any[]) : [];\r\n  cache.images = images;\r\n  return images;\r\n}\r\n\r\n/** Convenience: ensure both icons + images (with in-flight dedupe) */\r\nexport async function ensureDynamicPreload(): Promise<Cache> {\r\n  if (cache.icons && cache.images) return cache;\r\n  if (inFlight) return inFlight;\r\n\r\n  inFlight = Promise.all([ensureIconsPreload(), ensureImagesPreload()])\r\n    .then(([icons, images]) => {\r\n      cache = { icons, images };\r\n      return cache;\r\n    })\r\n    .finally(() => {\r\n      inFlight = null;\r\n    });\r\n\r\n  return inFlight;\r\n}\r\n\r\n// Optional: hydrate from SSR\r\ndeclare global {\r\n  interface Window {\r\n    __DYNAMIC_PRELOAD__?: Cache;\r\n  }\r\n}\r\nif (typeof window !== 'undefined' && (window as any).__DYNAMIC_PRELOAD__) {\r\n  primeFromSSR((window as any).__DYNAMIC_PRELOAD__);\r\n}\r\n","// src/components/dynamic-app/frame.tsx\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport client from '../../utils/sanity';\r\nimport { useDynamicOverlay } from '../../utils/content-utility/dynamic-overlay';\r\nimport { useSsrData } from '../../utils/context-providers/ssr-data-context';\r\nimport { useRealMobileViewport } from '../../utils/content-utility/real-mobile';\r\nimport LoadingHub from '../../utils/loading/loading-hub';\r\nimport '../../styles/block-type-a.css';\r\n\r\nimport { ensureDynamicPreload } from '../../dynamic-app/preload-dynamic-app';\r\nimport { urlFor } from '../../utils/media-providers/image-builder';\r\n\r\nconst getDeviceType = (w: number): 'phone' | 'tablet' | 'laptop' =>\r\n  w < 768 ? 'phone' : w < 1025 ? 'tablet' : 'laptop';\r\n\r\nconst Frame: React.FC = () => {\r\n  const ssrData = useSsrData();\r\n  const preloadedMap = (ssrData?.preloaded?.dynamic as Record<string, string>) || {};\r\n  const [svgMap, setSvgMap] = useState<Record<string, string>>(preloadedMap);\r\n  const [device, setDevice] = useState<'phone' | 'tablet' | 'laptop'>(\r\n    getDeviceType(typeof window !== 'undefined' ? window.innerWidth : 1200)\r\n  );\r\n  const [imgLoaded, setImgLoaded] = useState(false);\r\n  const [fetchErr, setFetchErr] = useState<string | null>(null);\r\n\r\n  const frameRef = useRef<HTMLImageElement>(null);\r\n  const overlaySize = useDynamicOverlay(frameRef);\r\n  const isRealMobile = useRealMobileViewport();\r\n\r\n  useEffect(() => {\r\n    const onResize = () => setDevice(getDeviceType(window.innerWidth));\r\n    window.addEventListener('resize', onResize);\r\n    window.addEventListener('orientationchange', onResize);\r\n    return () => {\r\n      window.removeEventListener('resize', onResize);\r\n      window.removeEventListener('orientationchange', onResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(svgMap).length > 0) return;\r\n    client\r\n      .fetch(\r\n        `*[_type == \"svgAsset\" && title in [\"Laptop\", \"Tablet\", \"Phone\"]]{\r\n          title, file { asset->{url} }\r\n        }`\r\n      )\r\n      .then((results: any[]) => {\r\n        const map: Record<string, string> = {};\r\n        results.forEach((r: any) => {\r\n          map[r.title.toLowerCase()] = r.file?.asset?.url;\r\n        });\r\n        setSvgMap(map);\r\n      })\r\n      .catch((err) => {\r\n        setFetchErr('assets-unavailable');\r\n        console.warn('[Frame] fetch SVG failed:', err);\r\n      });\r\n  }, [svgMap]);\r\n\r\n  const svgUrl = svgMap[device];\r\n\r\n  useEffect(() => {\r\n    const img = frameRef.current;\r\n    setImgLoaded(Boolean(img && img.complete && svgUrl));\r\n  }, [svgUrl]);\r\n\r\n  // When the frame is in place, warm LOW-QUALITY card images into cache\r\n  const warmedOnce = useRef(false);\r\n  useEffect(() => {\r\n    if (!imgLoaded || warmedOnce.current) return;\r\n    warmedOnce.current = true;\r\n\r\n    (async () => {\r\n      try {\r\n        const { images } = await ensureDynamicPreload(); // deduped with any other callers\r\n        if (!Array.isArray(images) || images.length === 0) return;\r\n\r\n        // tune these to taste\r\n        const WARM_COUNT = 16;     // how many items to warm\r\n        const LQ_WIDTH = 320;      // low-quality width\r\n        const LQ_QUALITY = 25;     // low-quality JPEG/WebP quality\r\n\r\n        const head = document.head;\r\n        let warmed = 0;\r\n\r\n        outer: for (const it of images) {\r\n          // warm both image1 and image2 if present, but respect WARM_COUNT cap\r\n          const candidates = [it?.image1, it?.image2].filter(Boolean);\r\n          for (const srcAsset of candidates) {\r\n            const src = urlFor(srcAsset)\r\n              .width(LQ_WIDTH)\r\n              .quality(LQ_QUALITY)\r\n              .auto('format')\r\n              .url();\r\n\r\n            if (!src) continue;\r\n\r\n            // Avoid duplicate <link> entries\r\n            if (!document.querySelector(`link[rel=\"preload\"][as=\"image\"][href=\"${src}\"]`)) {\r\n              const link = document.createElement('link');\r\n              link.rel = 'preload';\r\n              link.as = 'image';\r\n              link.href = src;\r\n              link.crossOrigin = 'anonymous';\r\n              // TS-safe way to set fetch priority hint\r\n              link.setAttribute('fetchpriority', 'low');\r\n              head.appendChild(link);\r\n            }\r\n\r\n            // Kick off an actual request regardless of preload support\r\n            const preImg = new Image();\r\n            preImg.decoding = 'async';\r\n            preImg.crossOrigin = 'anonymous';\r\n            preImg.src = src;\r\n\r\n            warmed += 1;\r\n            if (warmed >= WARM_COUNT) break outer;\r\n          }\r\n        }\r\n      } catch {\r\n        // ignore; cards will still lazy-load normally\r\n      }\r\n    })();\r\n  }, [imgLoaded]);\r\n\r\n  return (\r\n    <section className=\"block-type-a\">\r\n      <div className=\"device-wrapper\">\r\n        <img\r\n          ref={frameRef}\r\n          id=\"dynamic-device-frame\"\r\n          src={svgUrl || undefined}\r\n          alt={device}\r\n          className={`device-frame ${device}`}\r\n          decoding=\"async\"\r\n          loading=\"eager\"\r\n          onLoad={() => setImgLoaded(true)}\r\n          onError={() => setImgLoaded(true)}\r\n          draggable={false}\r\n          style={{\r\n            visibility: svgUrl ? 'visible' : 'hidden',\r\n            opacity: imgLoaded && svgUrl ? 1 : 0,\r\n            transition: 'opacity 150ms ease',\r\n          }}\r\n          data-src-laptop={svgMap['laptop'] || ''}\r\n          data-src-tablet={svgMap['tablet'] || ''}\r\n          data-src-phone={svgMap['phone'] || ''}\r\n          data-device={device}\r\n        />\r\n\r\n        <div\r\n          className=\"screen-overlay\"\r\n          style={\r\n            device === 'phone'\r\n              ? {\r\n                  width: `${overlaySize.width}px`,\r\n                  height: isRealMobile\r\n                    ? `${overlaySize.heightSet1}svh`\r\n                    : `${overlaySize.heightSet2}px`,\r\n                }\r\n              : undefined\r\n          }\r\n        >\r\n          {/* Loader hub goes here. ShadowEntry will hide it onReady */}\r\n          <div id=\"dynamic-overlay-loader\">\r\n            <LoadingHub\r\n              className=\"loading-hub--dynamic loading-hub--center\"\r\n              keyword=\"dynamic\"\r\n              lines={[\r\n                'Measuring app frameâ€¦',\r\n                'Creating shadow rootâ€¦',\r\n                'Injecting app stylesâ€¦',\r\n                'Loading SVG iconsâ€¦',\r\n                'Mounting app shellâ€¦',\r\n                'Wiring observers and inputâ€¦',\r\n              ]}\r\n              minHeight={72}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {fetchErr && <div className=\"soft-warning\">media frame unavailable</div>}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Frame;\r\n","import { useEffect, useState } from 'react';\r\n\r\nexport function useDynamicOverlay(frameRef: React.RefObject<HTMLElement>) {\r\n  const [style, setStyle] = useState<{\r\n    width: number;\r\n    heightSet1: number;\r\n    heightSet2: number;\r\n  }>({\r\n    width: 0,\r\n    heightSet1: 0,\r\n    heightSet2: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const update = () => {\r\n      if (!frameRef.current) return;\r\n\r\n      const rect = frameRef.current.getBoundingClientRect();\r\n      const aspect = rect.width / rect.height;\r\n\r\n      // Aspect ratio breakpoints\r\n      const minAspect = 1.5 / 6.5; // ~0.2307\r\n      const maxAspect = 3.3 / 6.5; // ~0.5077\r\n\r\n      // Width range (shared)\r\n      const minWidth = 150;\r\n      const maxWidth = 320;\r\n\r\n      // Height range set 1 (your current svh-based values)\r\n      const minHeightSet1 = 63;\r\n      const maxHeightSet1 = 93;\r\n\r\n      // Height range set 2 (original px-based)\r\n      const minHeightSet2 = 280;\r\n      const maxHeightSet2 = 610;\r\n\r\n      // --- Aspect ratio-based lerp ---\r\n      let width: number;\r\n      let height1: number;\r\n      let height2: number;\r\n\r\n      if (aspect <= minAspect) {\r\n        width = minWidth;\r\n        height1 = minHeightSet1;\r\n        height2 = minHeightSet2;\r\n      } else if (aspect >= maxAspect) {\r\n        width = maxWidth;\r\n        height1 = maxHeightSet1;\r\n        height2 = maxHeightSet2;\r\n      } else {\r\n        const t = (aspect - minAspect) / (maxAspect - minAspect);\r\n        width = minWidth + (maxWidth - minWidth) * t;\r\n        height1 = minHeightSet1 + (maxHeightSet1 - minHeightSet1) * t;\r\n        height2 = minHeightSet2 + (maxHeightSet2 - minHeightSet2) * t;\r\n      }\r\n\r\n      // --- Absolute height multiplier (0 â†’ 2 over 0â€“1300px) ---\r\n      const minFrameHeight = 0;\r\n      const maxFrameHeight = 1300;\r\n      const minMultiplier = 0;\r\n      const maxMultiplier = 2;\r\n\r\n      const clampedHeight = Math.min(Math.max(rect.height, minFrameHeight), maxFrameHeight);\r\n      const heightT = (clampedHeight - minFrameHeight) / (maxFrameHeight - minFrameHeight);\r\n      const heightMultiplier = minMultiplier + (maxMultiplier - minMultiplier) * heightT;\r\n\r\n      // Apply multiplier\r\n      width *= heightMultiplier;\r\n      height1 *= heightMultiplier;\r\n      height2 *= heightMultiplier;\r\n\r\n      setStyle({\r\n        width,\r\n        heightSet1: height1,\r\n        heightSet2: height2,\r\n      });\r\n    };\r\n\r\n    update();\r\n    window.addEventListener('resize', update);\r\n    window.addEventListener('orientationchange', update);\r\n    return () => {\r\n      window.removeEventListener('resize', update);\r\n      window.removeEventListener('orientationchange', update);\r\n    };\r\n  }, [frameRef]);\r\n\r\n  return style; // { width, heightSet1, heightSet2 }\r\n}\r\n","// useRealMobileViewport.ts\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport function useRealMobileViewport() {\r\n  const [isRealMobile, setIsRealMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      const touch = navigator.maxTouchPoints > 0;\r\n      const coarse = window.matchMedia?.('(pointer: coarse)').matches ?? false;\r\n      const width = window.innerWidth;\r\n      const ua = navigator.userAgent || navigator.vendor || (window as any).opera;\r\n\r\n      // iOS detection (iPhone / iPad)\r\n      const isIOS = /iPad|iPhone|iPod/.test(ua) ||\r\n        (navigator.platform === 'MacIntel' && touch); // iPadOS pretends to be Mac\r\n\r\n      // Android detection\r\n      const isAndroid = /Android/.test(ua);\r\n\r\n      // Consider it real mobile if:\r\n      // - Touch exists, and viewport is small, or\r\n      // - Known mobile UA\r\n      const realMobile =\r\n        (touch && width <= 1024) ||\r\n        isIOS ||\r\n        isAndroid ||\r\n        coarse;\r\n\r\n      setIsRealMobile(realMobile);\r\n    };\r\n\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    window.addEventListener('orientationchange', checkMobile);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n      window.removeEventListener('orientationchange', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  return isRealMobile;\r\n}\r\n","// lib/fetchUser.ts\r\nimport sanityClient from '../../utils/sanity';\r\n\r\nexport const fetchImages = async (sortOption = 'default') => {\r\n  let orderClause = '';\r\n  switch (sortOption) {\r\n    case 'titleAsc':  orderClause = '| order(title asc)'; break;\r\n    case 'titleDesc': orderClause = '| order(title desc)'; break;\r\n    case 'dateAsc':   orderClause = '| order(_createdAt asc)'; break;\r\n    case 'dateDesc':  orderClause = '| order(_createdAt desc)'; break;\r\n  }\r\n\r\n  const query = `*[_type == \"imageAsset\"] ${orderClause} {\r\n    _id,\r\n    title,\r\n    description,\r\n    // dereference to get real URLs on the server\r\n    image1{ ..., asset->{ url } },\r\n    image2{ ..., asset->{ url } },\r\n    caption1,\r\n    alt1,\r\n    alt2,\r\n    iconName,\r\n    url1\r\n  }`;\r\n\r\n  try {\r\n    const data = await sanityClient.fetch(query);\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching images', error);\r\n    return [];\r\n  }\r\n};\r\n","/* Fetch SVG icons */\r\nimport sanityClient from '../../utils/sanity';\r\n\r\nexport default async function fetchSVGIcons() {\r\n  const query = `*[_type == \"svgIcon\"]{\r\n    title,\r\n    icon,                         // inline SVG string (portable text / string)\r\n    \"url\": file.asset->url        // optional file URL if present in schema\r\n  }`;\r\n  const icons = await sanityClient.fetch(query);\r\n  return icons;\r\n}"],"names":["LoadingHub","_ref","keyword","lines","minHeight","className","ariaLabel","progress","cycleMs","animMs","delayMs","lineIndex","setLineIndex","useState","show","setShow","useEffect","t","setTimeout","clearTimeout","hasMultiple","length","setInterval","i","clearInterval","style","useMemo","concat","srRef","useRef","current","textContent","Math","round","_jsx","role","undefined","children","_jsxs","ref","cache","inFlight","getPreloadedDynamicApp","async","whenDynamicPreloadReady","icons","images","ensureIconsPreload","iconsRaw","fetchSVGIcons","_unused","list","reduce","acc","it","_it$icon","title","val","icon","url","toIconMap","Array","isArray","ensureImagesPreload","imagesRaw","fetchImages","_unused2","ensureDynamicPreload","Promise","all","then","finally","data","window","__DYNAMIC_PRELOAD__","_objectSpread","getDeviceType","w","Frame","_ssrData$preloaded","ssrData","useSsrData","preloadedMap","preloaded","dynamic","svgMap","setSvgMap","device","setDevice","innerWidth","imgLoaded","setImgLoaded","fetchErr","setFetchErr","frameRef","overlaySize","useDynamicOverlay","isRealMobile","useRealMobileViewport","onResize","addEventListener","removeEventListener","Object","keys","client","fetch","results","map","forEach","r","_r$file","_r$file$asset","toLowerCase","file","asset","catch","err","console","warn","svgUrl","img","Boolean","complete","warmedOnce","WARM_COUNT","LQ_WIDTH","LQ_QUALITY","head","document","warmed","outer","candidates","image1","image2","filter","srcAsset","src","urlFor","width","quality","auto","querySelector","link","createElement","rel","as","href","crossOrigin","setAttribute","appendChild","preImg","Image","decoding","id","alt","loading","onLoad","onError","draggable","visibility","opacity","transition","height","heightSet1","heightSet2","setStyle","update","rect","getBoundingClientRect","aspect","minAspect","maxAspect","height1","height2","heightMultiplier","min","max","setIsRealMobile","checkMobile","_window$matchMedia$ma","_window$matchMedia","_window","touch","navigator","maxTouchPoints","coarse","matchMedia","call","matches","ua","userAgent","vendor","opera","isIOS","test","platform","isAndroid","orderClause","arguments","query","sanityClient","error"],"sourceRoot":""}